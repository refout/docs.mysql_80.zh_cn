import{r as o,o as r,c as l,a as n,b as e,w as p,F as i,d as s,e as a}from"./app.263bba7e.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const u={},_={id:"_12-functions-and-operators",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_12-functions-and-operators","aria-hidden":"true"},"#",-1),m=s(),k={href:"https://dev.mysql.com/doc/refman/8.0/en/functions.html",target:"_blank",rel:"noopener noreferrer"},f=s("12 Functions and Operators"),g={id:"_12-1-built-in-function-and-operator-reference",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_12-1-built-in-function-and-operator-reference","aria-hidden":"true"},"#",-1),y=s(),v={href:"https://dev.mysql.com/doc/refman/8.0/en/built-in-function-reference.html",target:"_blank",rel:"noopener noreferrer"},E=s("12.1 Built-In Function and Operator Reference"),q={id:"_12-2-loadable-function-reference",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#_12-2-loadable-function-reference","aria-hidden":"true"},"#",-1),S=s(),L={href:"https://dev.mysql.com/doc/refman/8.0/en/loadable-function-reference.html",target:"_blank",rel:"noopener noreferrer"},x=s("12.2 Loadable Function Reference"),w={id:"_12-3-type-conversion-in-expression-evaluation",tabindex:"-1"},R=n("a",{class:"header-anchor",href:"#_12-3-type-conversion-in-expression-evaluation","aria-hidden":"true"},"#",-1),N=s(),C={href:"https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html",target:"_blank",rel:"noopener noreferrer"},I=s("12.3 Type Conversion in Expression Evaluation"),A={id:"_12-4-operators",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#_12-4-operators","aria-hidden":"true"},"#",-1),O=s(),U={href:"https://dev.mysql.com/doc/refman/8.0/en/non-typed-operators.html",target:"_blank",rel:"noopener noreferrer"},G=s("12.4 Operators"),B={id:"_12-5-flow-control-functions",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#_12-5-flow-control-functions","aria-hidden":"true"},"#",-1),X=s(),M={href:"https://dev.mysql.com/doc/refman/8.0/en/flow-control-functions.html",target:"_blank",rel:"noopener noreferrer"},D=s("12.5 Flow Control Functions"),W={id:"_12-6-numeric-functions-and-operators",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#_12-6-numeric-functions-and-operators","aria-hidden":"true"},"#",-1),Q=s(),Y={href:"https://dev.mysql.com/doc/refman/8.0/en/numeric-functions.html",target:"_blank",rel:"noopener noreferrer"},V=s("12.6 Numeric Functions and Operators"),K=n("h3",{id:"_12-6-2-\u6570\u5B66\u51FD\u6570",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_12-6-2-\u6570\u5B66\u51FD\u6570","aria-hidden":"true"},"#"),s(" 12.6.2 \u6570\u5B66\u51FD\u6570")],-1),j={id:"conv-n-from-base-to-base",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#conv-n-from-base-to-base","aria-hidden":"true"},"#",-1),J=s(),Z={href:"https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv",target:"_blank",rel:"noopener noreferrer"},$=s("CONV("),nn=n("em",null,"N",-1),sn=s(","),en=n("em",null,"from_base",-1),tn=s(",to_base)"),an={id:"_12-7-date-and-time-functions",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#_12-7-date-and-time-functions","aria-hidden":"true"},"#",-1),cn=s(),rn={href:"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html",target:"_blank",rel:"noopener noreferrer"},ln=s("12.7 Date and Time Functions"),pn={id:"_12-8-\u5B57\u7B26\u4E32\u51FD\u6570\u548C\u8FD0\u7B97\u7B26",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#_12-8-\u5B57\u7B26\u4E32\u51FD\u6570\u548C\u8FD0\u7B97\u7B26","aria-hidden":"true"},"#",-1),un=s(),_n={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html",target:"_blank",rel:"noopener noreferrer"},hn=s("12.8 \u5B57\u7B26\u4E32\u51FD\u6570\u548C\u8FD0\u7B97\u7B26"),mn=a('<blockquote><p>Table 12.12 \u5B57\u7B26\u4E32\u51FD\u6570\u548C\u8FD0\u7B97\u7B26</p></blockquote><table><thead><tr><th style="text-align:left;">\u540D\u79F0</th><th style="text-align:left;">\u63CF\u8FF0</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="#asciistr"><code>ASCII()</code></a></td><td style="text-align:left;">\u8FD4\u56DE\u5B57\u7B26\u4E32\u6700\u5DE6\u8FB9\u5B57\u7B26\u7684ASCII\u7801\u5341\u8FDB\u5236\u503C</td></tr><tr><td style="text-align:left;"><a href="#binn"><code>BIN()</code></a></td><td style="text-align:left;">\u8FD4\u56DE\u6570\u5B57\u7684\u4E8C\u8FDB\u5236\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F</td></tr><tr><td style="text-align:left;"><a href="#BIT_LENGTH()"><code>BIT_LENGTH()</code></a></td><td style="text-align:left;">\u8FD4\u56DE\u53C2\u6570\u7684\u957F\u5EA6\uFF08\u5355\u4F4D\uFF1Abit\uFF09</td></tr><tr><td style="text-align:left;"><a href="#charnusing"><code>CHAR()</code></a></td><td style="text-align:left;">\u8FD4\u56DE\u4F20\u9012\u7684\u6BCF\u4E2A\u6574\u6570\u53C2\u6570\u6240\u5BF9\u5E94\u7684\u5B57\u7B26</td></tr><tr><td style="text-align:left;"><a href=""><code>CHAR_LENGTH()</code></a></td><td style="text-align:left;">Return number of characters in argument</td></tr><tr><td style="text-align:left;"><a href=""><code>CHARACTER_LENGTH()</code></a></td><td style="text-align:left;">Synonym for CHAR_LENGTH()</td></tr><tr><td style="text-align:left;"><a href=""><code>CONCAT()</code></a></td><td style="text-align:left;">Return concatenated string</td></tr><tr><td style="text-align:left;"><a href=""><code>CONCAT_WS()</code></a></td><td style="text-align:left;">Return concatenate with separator</td></tr><tr><td style="text-align:left;"><a href=""><code>ELT()</code></a></td><td style="text-align:left;">Return string at index number</td></tr><tr><td style="text-align:left;"><a href=""><code>EXPORT_SET()</code></a></td><td style="text-align:left;">Return a string such that for every bit set in the value bits, you get an on string and for every unset bit, you get an off string</td></tr><tr><td style="text-align:left;"><a href=""><code>FIELD()</code></a></td><td style="text-align:left;">Index (position) of first argument in subsequent arguments</td></tr><tr><td style="text-align:left;"><a href=""><code>FIND_IN_SET()</code></a></td><td style="text-align:left;">Index (position) of first argument within second argument</td></tr><tr><td style="text-align:left;"><a href=""><code>FORMAT()</code></a></td><td style="text-align:left;">Return a number formatted to specified number of decimal places</td></tr><tr><td style="text-align:left;"><a href=""><code>FROM_BASE64()</code></a></td><td style="text-align:left;">Decode base64 encoded string and return result</td></tr><tr><td style="text-align:left;"><a href=""><code>HEX()</code></a></td><td style="text-align:left;">Hexadecimal representation of decimal or string value</td></tr><tr><td style="text-align:left;"><a href=""><code>INSERT()</code></a></td><td style="text-align:left;">Insert substring at specified position up to specified number of characters</td></tr><tr><td style="text-align:left;"><a href=""><code>INSTR()</code></a></td><td style="text-align:left;">Return the index of the first occurrence of substring</td></tr><tr><td style="text-align:left;"><a href=""><code>LCASE()</code></a></td><td style="text-align:left;">Synonym for LOWER()</td></tr><tr><td style="text-align:left;"><a href=""><code>LEFT()</code></a></td><td style="text-align:left;">Return the leftmost number of characters as specified</td></tr><tr><td style="text-align:left;"><a href=""><code>LENGTH()</code></a></td><td style="text-align:left;">Return the length of a string in bytes</td></tr><tr><td style="text-align:left;"><a href=""><code>LIKE</code></a></td><td style="text-align:left;">Simple pattern matching</td></tr><tr><td style="text-align:left;"><a href=""><code>LOAD_FILE()</code></a></td><td style="text-align:left;">Load the named file</td></tr><tr><td style="text-align:left;"><a href=""><code>LOCATE()</code></a></td><td style="text-align:left;">Return the position of the first occurrence of substring</td></tr><tr><td style="text-align:left;"><a href=""><code>LOWER()</code></a></td><td style="text-align:left;">Return the argument in lowercase</td></tr><tr><td style="text-align:left;"><a href=""><code>LPAD()</code></a></td><td style="text-align:left;">Return the string argument, left-padded with the specified string</td></tr><tr><td style="text-align:left;"><a href=""><code>LTRIM()</code></a></td><td style="text-align:left;">Remove leading spaces</td></tr><tr><td style="text-align:left;"><a href=""><code>MAKE_SET()</code></a></td><td style="text-align:left;">Return a set of comma-separated strings that have the corresponding bit in bits set</td></tr><tr><td style="text-align:left;"><a href=""><code>MATCH()</code></a></td><td style="text-align:left;">Perform full-text search</td></tr><tr><td style="text-align:left;"><a href=""><code>MID()</code></a></td><td style="text-align:left;">Return a substring starting from the specified position</td></tr><tr><td style="text-align:left;"><a href=""><code>NOT LIKE</code></a></td><td style="text-align:left;">Negation of simple pattern matching</td></tr><tr><td style="text-align:left;"><a href=""><code>NOT REGEXP</code></a></td><td style="text-align:left;">Negation of REGEXP</td></tr><tr><td style="text-align:left;"><a href=""><code>OCT()</code></a></td><td style="text-align:left;">Return a string containing octal representation of a number</td></tr><tr><td style="text-align:left;"><a href=""><code>OCTET_LENGTH()</code></a></td><td style="text-align:left;">Synonym for LENGTH()</td></tr><tr><td style="text-align:left;"><a href=""><code>ORD()</code></a></td><td style="text-align:left;">Return character code for leftmost character of the argument</td></tr><tr><td style="text-align:left;"><a href=""><code>POSITION()</code></a></td><td style="text-align:left;">Synonym for LOCATE()</td></tr><tr><td style="text-align:left;"><a href=""><code>QUOTE()</code></a></td><td style="text-align:left;">Escape the argument for use in an SQL statement</td></tr><tr><td style="text-align:left;"><a href=""><code>REGEXP</code></a></td><td style="text-align:left;">Whether string matches regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>REGEXP_INSTR()</code></a></td><td style="text-align:left;">Starting index of substring matching regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>REGEXP_LIKE()</code></a></td><td style="text-align:left;">Whether string matches regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>REGEXP_REPLACE()</code></a></td><td style="text-align:left;">Replace substrings matching regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>REGEXP_SUBSTR()</code></a></td><td style="text-align:left;">Return substring matching regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>REPEAT()</code></a></td><td style="text-align:left;">Repeat a string the specified number of times</td></tr><tr><td style="text-align:left;"><a href=""><code>REPLACE()</code></a></td><td style="text-align:left;">Replace occurrences of a specified string</td></tr><tr><td style="text-align:left;"><a href=""><code>REVERSE()</code></a></td><td style="text-align:left;">Reverse the characters in a string</td></tr><tr><td style="text-align:left;"><a href=""><code>RIGHT()</code></a></td><td style="text-align:left;">Return the specified rightmost number of characters</td></tr><tr><td style="text-align:left;"><a href=""><code>RLIKE</code></a></td><td style="text-align:left;">Whether string matches regular expression</td></tr><tr><td style="text-align:left;"><a href=""><code>RPAD()</code></a></td><td style="text-align:left;">Append string the specified number of times</td></tr><tr><td style="text-align:left;"><a href=""><code>RTRIM()</code></a></td><td style="text-align:left;">Remove trailing spaces</td></tr><tr><td style="text-align:left;"><a href=""><code>SOUNDEX()</code></a></td><td style="text-align:left;">Return a soundex string</td></tr><tr><td style="text-align:left;"><a href=""><code>SOUNDS LIKE</code></a></td><td style="text-align:left;">Compare sounds</td></tr><tr><td style="text-align:left;"><a href=""><code>SPACE()</code></a></td><td style="text-align:left;">Return a string of the specified number of spaces</td></tr><tr><td style="text-align:left;"><a href=""><code>STRCMP()</code></a></td><td style="text-align:left;">Compare two strings</td></tr><tr><td style="text-align:left;"><a href=""><code>SUBSTR()</code></a></td><td style="text-align:left;">Return the substring as specified</td></tr><tr><td style="text-align:left;"><a href=""><code>SUBSTRING()</code></a></td><td style="text-align:left;">Return the substring as specified</td></tr><tr><td style="text-align:left;"><a href=""><code>SUBSTRING_INDEX()</code></a></td><td style="text-align:left;">Return a substring from a string before the specified number of occurrences of the delimiter</td></tr><tr><td style="text-align:left;"><a href=""><code>TO_BASE64()</code></a></td><td style="text-align:left;">Return the argument converted to a base-64 string</td></tr><tr><td style="text-align:left;"><a href=""><code>TRIM()</code></a></td><td style="text-align:left;">Remove leading and trailing spaces</td></tr><tr><td style="text-align:left;"><a href=""><code>UCASE()</code></a></td><td style="text-align:left;">Synonym for UPPER()</td></tr><tr><td style="text-align:left;"><a href=""><code>UNHEX()</code></a></td><td style="text-align:left;">Return a string containing hex representation of a number</td></tr><tr><td style="text-align:left;"><a href=""><code>UPPER()</code></a></td><td style="text-align:left;">Convert to uppercase</td></tr><tr><td style="text-align:left;"><a href=""><code>WEIGHT_STRING()</code></a></td><td style="text-align:left;">Return the weight string for a string</td></tr></tbody></table>',2),kn=s("\u5982\u679C\u7ED3\u679C\u957F\u5EA6\u5927\u4E8E\u7CFB\u7EDF\u53D8\u91CF "),fn=n("code",null,"max_allowed_packet",-1),gn=s(" \u7684\u503C\uFF0C\u5219\u5B57\u7B26\u4E32\u51FD\u6570\u8FD4\u56DE "),bn=n("code",null,"NULL",-1),yn=s(" \u3002\u53C2\u89C1"),vn=s("5.1.1 \u914D\u7F6E\u670D\u52A1\u5668"),En=s("\u3002"),qn=n("p",null,"\u5BF9\u4E8E\u64CD\u4F5C\u5B57\u7B26\u4E32\u4F4D\u7F6E\u7684\u51FD\u6570\uFF0C\u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u7F16\u53F7\u4E3A 1\u3002",-1),Tn=n("p",null,"\u5BF9\u4E8E\u5E26\u957F\u5EA6\u53C2\u6570\u7684\u51FD\u6570\uFF0C\u975E\u6574\u6570\u53C2\u6570\u56DB\u820D\u4E94\u5165\u4E3A\u6700\u63A5\u8FD1\u7684\u6574\u6570\u3002",-1),Sn={id:"ascii-str",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#ascii-str","aria-hidden":"true"},"#",-1),xn=s(),wn={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ascii",target:"_blank",rel:"noopener noreferrer"},Rn=s("ASCII(str)"),Nn=a(`<p>\u8FD4\u56DE\u5B57\u7B26\u4E32 <code>str</code> \u6700\u5DE6\u8FB9\u7684\u5B57\u7B26\u7684 ASCII \u5341\u8FDB\u5236\u503C\u3002\u5982\u679C <code>str</code> \u4E3A\u7A7A\u5B57\u7B26\u4E32\u5219\u8FD4\u56DE <code>0</code> \u3002\u5982\u679C <em><code>str</code></em> \u662F <code>NULL</code> \u5219\u8FD4\u56DE <code>NULL</code> \u3002<code>ASCII()</code> \u9002\u7528\u4E8E 8 \u4F4D\u5B57\u7B26</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ASCII<span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">50</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ASCII<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">50</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ASCII<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">100</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ASCII<span class="token punctuation">(</span><span class="token string">&#39;dx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">100</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> ASCII<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">NULL</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> ASCII<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u53E6\u89C1 <a href="#ordstr"><code>ORD()</code></a> \u51FD\u6570\u3002</p>`,3),Cn={id:"bin-n",tabindex:"-1"},In=n("a",{class:"header-anchor",href:"#bin-n","aria-hidden":"true"},"#",-1),An=s(),Hn={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bin",target:"_blank",rel:"noopener noreferrer"},On=s("BIN(N)"),Un=a(`<p>\u8FD4\u56DE <code>N</code> \u7684\u4E8C\u8FDB\u5236\u503C\u7684\u5B57\u7B26\u4E32\u8868\u793A\u5F62\u5F0F\uFF0C\u5176\u4E2D <code>N</code> \u662F\u957F\u6574\u578B\uFF08 <code>BIGINT</code> \uFF09\u6570\u503C\u3002\u76F8\u5F53\u4E8E <a href="#convnfrombasetobase"><code>CONV(N, 10, 2)</code></a>\u3002\u5982\u679C <code>N</code> \u662F <code>NULL</code> \u5219\u8FD4\u56DE <code>NULL</code> \u3002</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> BIN<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;1100&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),Gn={id:"bit-length-str",tabindex:"-1"},Bn=n("a",{class:"header-anchor",href:"#bit-length-str","aria-hidden":"true"},"#",-1),Fn=s(),Xn={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_bit-length",target:"_blank",rel:"noopener noreferrer"},Mn=s("BIT_LENGTH(str)"),Dn=a(`<p>\u8FD4\u56DE\u5B57\u7B26\u4E32 <code>str</code> \u7684\u957F\u5EA6\uFF08\u5355\u4F4D\uFF1A<code>bit</code>\uFF09\u3002</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> BIT_LENGTH<span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">32</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),Wn={id:"char-n-using-charset-name",tabindex:"-1"},Pn=n("a",{class:"header-anchor",href:"#char-n-using-charset-name","aria-hidden":"true"},"#",-1),Qn=s(),Yn={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char",target:"_blank",rel:"noopener noreferrer"},Vn=s("CHAR(N,... [USING charset_name])"),Kn=a(`<p><code>CHAR()</code> \u5C06\u6BCF\u4E00\u4E2A\u53C2\u6570 <code>N</code> \u89E3\u91CA\u4E3A\u4E00\u4E2A\u6574\u6570\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u8BE5\u5B57\u7B26\u4E32\u7531\u8FD9\u4E9B\u6574\u6570\u6240\u4EE3\u8868\u7684 <code>ASCII</code> \u5B57\u7B26\u7EC4\u6210\u3002\u5982\u679C <code>N</code> \u4E3A <code>NULL</code> \u5C06\u88AB\u5FFD\u7565\u3002</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token string">&#39;76&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQL&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">77.3</span><span class="token punctuation">,</span><span class="token string">&#39;77.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MMM&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>CHAR()</code> \u7684\u53C2\u6570\u5927\u4E8E <code>255</code> \u5C06\u88AB\u8F6C\u6362\u4E3A\u591A\u4E2A\u5B57\u8282\u7684\u7ED3\u679C\u3002\u4F8B\u5982\uFF0C<code>CHAR(256)</code> \u7B49\u4EF7\u4E8E <code>CHAR(1,0)</code> \u3001<code>CHAR(256*256)</code> \u7B49\u4EF7\u4E8E <code>CHAR(1,0,0)</code> \uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------------+----------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------+----------------+</span>
<span class="token operator">|</span> <span class="token number">0100</span>           <span class="token operator">|</span> <span class="token number">0100</span>           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------+----------------+</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------+--------------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+--------------------+</span>
<span class="token operator">|</span> <span class="token number">010000</span>           <span class="token operator">|</span> <span class="token number">010000</span>             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+--------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u9ED8\u8BA4\u60C5\u51B5\u4E0B <code>CHAR()</code> \u8FD4\u56DE\u4E00\u4E2A\u4E8C\u8FDB\u5236\u7684\u5B57\u7B26\u4E32\u3002\u5982\u9700\u8981\u8FD4\u56DE\u7ED9\u5B9A\u5B57\u7B26\u96C6\u7684\u5B57\u7B26\u4E32\uFF0C\u4F7F\u7528\u53EF\u9009\u7684 <code>USING</code> \u5B50\u53E5\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span>X<span class="token string">&#39;65&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span>X<span class="token string">&#39;65&#39;</span> <span class="token keyword">USING</span> utf8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------------------+---------------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span>X<span class="token string">&#39;65&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span>X<span class="token string">&#39;65&#39;</span> <span class="token keyword">USING</span> utf8<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------+---------------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">binary</span>               <span class="token operator">|</span> utf8                            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------+---------------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5982\u679C\u7ED9\u51FA\u4E86 <code>USING</code> \u5E76\u4E14\u7ED3\u679C\u5B57\u7B26\u4E32\u5BF9\u4E8E\u7ED9\u5B9A\u7684\u5B57\u7B26\u96C6\u662F\u975E\u6CD5\u7684\uFF0C\u5219\u4F1A\u53D1\u51FA\u8B66\u544A\u3002 \u6B64\u5916\uFF0C\u5982\u679C\u542F\u7528\u4E86\u4E25\u683C\u7684 <code>SQL</code> \u6A21\u5F0F\uFF0C\u5219 <code>CHAR()</code> \u7684\u7ED3\u679C\u5C06\u53D8\u4E3A <code>NULL</code>\u3002</p>`,7),jn=s("\u5982\u679C "),zn=n("code",null,"CHAR()",-1),Jn=s(" \u4ECE "),Zn=n("code",null,"mysql",-1),$n=s(" \u5BA2\u6237\u7AEF\u4E2D\u8C03\u7528\uFF0C\u5219\u4E8C\u8FDB\u5236\u5B57\u7B26\u4E32\u4F7F\u7528\u5341\u516D\u8FDB\u5236\u8868\u793A\u6CD5\u663E\u793A\uFF0C\u5177\u4F53\u53D6\u51B3\u4E8E "),ns={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex",target:"_blank",rel:"noopener noreferrer"},ss=n("code",null,"--binary-as-hex",-1),es=s(" \u7684\u503C\u3002 \u6709\u5173\u8BE5\u9009\u9879\u7684\u66F4\u591A\u4FE1\u606F\uFF0C\u8BF7\u53C2\u9605"),ts=n("a",{href:"4_mysql_programs#451_mysqlmysql%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%A2%E6%88%B7%E7%AB%AF"},"4.5.1 mysql \u2014 MySQL \u547D\u4EE4\u884C\u5BA2\u6237\u7AEF",-1),as=s("\u3002"),os={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length",target:"_blank",rel:"noopener noreferrer"},cs=n("code",null,"CHAR_LENGTH(*",-1),rs=s("str"),ls=n("code",null,"*)",-1),ps=s("Returns the length of the string "),is=n("em",null,[n("code",null,"str")],-1),ds=s(", measured in characters. A multibyte character counts as a single character. This means that for a string containing five 2-byte characters, "),us={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length",target:"_blank",rel:"noopener noreferrer"},_s=n("code",null,"LENGTH()",-1),hs=s(" returns "),ms=n("code",null,"10",-1),ks=s(", whereas "),fs={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length",target:"_blank",rel:"noopener noreferrer"},gs=n("code",null,"CHAR_LENGTH()",-1),bs=s(" returns "),ys=n("code",null,"5",-1),vs=s("."),Es={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_character-length",target:"_blank",rel:"noopener noreferrer"},qs=n("code",null,"CHARACTER_LENGTH(*",-1),Ts=s("str"),Ss=n("code",null,"*)",-1),Ls={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_character-length",target:"_blank",rel:"noopener noreferrer"},xs=n("code",null,"CHARACTER_LENGTH()",-1),ws=s(" is a synonym for "),Rs={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"CHAR_LENGTH()",-1),Cs=s("."),Is={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat",target:"_blank",rel:"noopener noreferrer"},As=n("code",null,"CONCAT(*",-1),Hs=s("str1"),Os=n("code",null,"*,*",-1),Us=s("str2"),Gs=n("code",null,"*,...)",-1),Bs=n("p",null,"Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent nonbinary string form.",-1),Fs={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat",target:"_blank",rel:"noopener noreferrer"},Xs=n("code",null,"CONCAT()",-1),Ms=s(" returns "),Ds=n("code",null,"NULL",-1),Ws=s(" if any argument is "),Ps=n("code",null,"NULL",-1),Qs=s("."),Ys=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;My&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;QL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQL&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;My&#39;</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">&#39;QL&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">NULL</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token number">14.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;14.3&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>For quoted strings, concatenation can be performed by placing the strings next to each other:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token string">&#39;My&#39;</span> <span class="token string">&#39;S&#39;</span> <span class="token string">&#39;QL&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQL&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),Vs=s("If "),Ks={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat",target:"_blank",rel:"noopener noreferrer"},js=n("code",null,"CONCAT()",-1),zs=s(" is invoked from within the "),Js={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},Zs=n("strong",null,"mysql",-1),$s=s(" client, binary string results display using hexadecimal notation, depending on the value of the "),ne={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex",target:"_blank",rel:"noopener noreferrer"},se=n("code",null,"--binary-as-hex",-1),ee=s(" . For more information about that option, see "),te={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},ae=s("Section 4.5.1, \u201Cmysql \u2014 The MySQL Command-Line Client\u201D"),oe=s("."),ce={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws",target:"_blank",rel:"noopener noreferrer"},re=n("code",null,"CONCAT_WS(*",-1),le=s("separator"),pe=n("code",null,"*,*",-1),ie=s("str1"),de=n("code",null,"*,*",-1),ue=s("str2"),_e=n("code",null,"*,...)",-1),he={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws",target:"_blank",rel:"noopener noreferrer"},me=n("code",null,"CONCAT_WS()",-1),ke=s(" stands for Concatenate With Separator and is a special form of "),fe={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat",target:"_blank",rel:"noopener noreferrer"},ge=n("code",null,"CONCAT()",-1),be=s(". The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments. If the separator is "),ye=n("code",null,"NULL",-1),ve=s(", the result is "),Ee=n("code",null,"NULL",-1),qe=s("."),Te=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;First name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Second name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Last Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;First name,Second name,Last Name&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT_WS<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;First name&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;Last Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;First name,Last Name&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),Se={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_concat-ws",target:"_blank",rel:"noopener noreferrer"},Le=n("code",null,"CONCAT_WS()",-1),xe=s(" does not skip empty strings. However, it does skip any "),we=n("code",null,"NULL",-1),Re=s(" values after the separator argument."),Ne={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt",target:"_blank",rel:"noopener noreferrer"},Ce=n("code",null,"ELT(*",-1),Ie=s("N"),Ae=n("code",null,"*,*",-1),He=s("str1"),Oe=n("code",null,"*,*",-1),Ue=s("str2"),Ge=n("code",null,"*,*",-1),Be=s("str3"),Fe=n("code",null,"*,...)",-1),Xe={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt",target:"_blank",rel:"noopener noreferrer"},Me=n("code",null,"ELT()",-1),De=a(" returns the *<code>N</code>*th element of the list of strings: <em><code>str1</code></em> if <em><code>N</code></em> = <code>1</code>, <em><code>str2</code></em> if <em><code>N</code></em> = <code>2</code>, and so on. Returns <code>NULL</code> if <em><code>N</code></em> is less than <code>1</code> or greater than the number of arguments. ",21),We={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt",target:"_blank",rel:"noopener noreferrer"},Pe=n("code",null,"ELT()",-1),Qe=s(" is the complement of "),Ye={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field",target:"_blank",rel:"noopener noreferrer"},Ve=n("code",null,"FIELD()",-1),Ke=s("."),je=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ELT<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Aa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Aa&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ELT<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;Aa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Dd&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),ze={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_export-set",target:"_blank",rel:"noopener noreferrer"},Je=n("code",null,"EXPORT_SET(*",-1),Ze=s("bits"),$e=n("code",null,"*,*",-1),nt=s("on"),st=n("code",null,"*,*",-1),et=s("off"),tt=n("code",null,"*[,*",-1),at=s("separator"),ot=n("code",null,"*[,*",-1),ct=s("number_of_bits"),rt=n("code",null,"*\\]])",-1),lt=a(`<p>Returns a string such that for every bit set in the value <em><code>bits</code></em>, you get an <em><code>on</code></em> string and for every bit not set in the value, you get an <em><code>off</code></em> string. Bits in <em><code>bits</code></em> are examined from right to left (from low-order to high-order bits). Strings are added to the result from left to right, separated by the <em><code>separator</code></em> string (the default being the comma character <code>,</code>). The number of bits examined is given by <em><code>number_of_bits</code></em>, which has a default of 64 if not specified. <em><code>number_of_bits</code></em> is silently clipped to 64 if larger than 64. It is treated as an unsigned integer, so a value of \u22121 is effectively the same as 64.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> EXPORT_SET<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Y,N,Y,N&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> EXPORT_SET<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;0,1,1,0,0,0,0,0,0,0&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,2),pt={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field",target:"_blank",rel:"noopener noreferrer"},it=n("code",null,"FIELD(*",-1),dt=s("str"),ut=n("code",null,"*,*",-1),_t=s("str1"),ht=n("code",null,"*,*",-1),mt=s("str2"),kt=n("code",null,"*,*",-1),ft=s("str3"),gt=n("code",null,"*,...)",-1),bt=a("<p>Returns the index (position) of <em><code>str</code></em> in the <em><code>str1</code></em>, <em><code>str2</code></em>, <em><code>str3</code></em>, <code>...</code> list. Returns <code>0</code> if <em><code>str</code></em> is not found.</p>",1),yt=s("If all arguments to "),vt={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field",target:"_blank",rel:"noopener noreferrer"},Et=n("code",null,"FIELD()",-1),qt=s(" are strings, all arguments are compared as strings. If all arguments are numbers, they are compared as numbers. Otherwise, the arguments are compared as double."),Tt=s("If "),St=n("em",null,[n("code",null,"str")],-1),Lt=s(" is "),xt=n("code",null,"NULL",-1),wt=s(", the return value is "),Rt=n("code",null,"0",-1),Nt=s(" because "),Ct=n("code",null,"NULL",-1),It=s(" fails equality comparison with any value. "),At={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field",target:"_blank",rel:"noopener noreferrer"},Ht=n("code",null,"FIELD()",-1),Ot=s(" is the complement of "),Ut={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt",target:"_blank",rel:"noopener noreferrer"},Gt=n("code",null,"ELT()",-1),Bt=s("."),Ft=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> FIELD<span class="token punctuation">(</span><span class="token string">&#39;Bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Aa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> FIELD<span class="token punctuation">(</span><span class="token string">&#39;Gg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Aa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),Xt={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set",target:"_blank",rel:"noopener noreferrer"},Mt=n("code",null,"FIND_IN_SET(*",-1),Dt=s("str"),Wt=n("code",null,"*,*",-1),Pt=s("strlist"),Qt=n("code",null,"*)",-1),Yt=a("Returns a value in the range of 1 to <em><code>N</code></em> if the string <em><code>str</code></em> is in the string list <em><code>strlist</code></em> consisting of <em><code>N</code></em> substrings. A string list is a string composed of substrings separated by <code>,</code> characters. If the first argument is a constant string and the second is a column of type ",11),Vt={href:"https://dev.mysql.com/doc/refman/8.0/en/set.html",target:"_blank",rel:"noopener noreferrer"},Kt=n("code",null,"SET",-1),jt=s(", the "),zt={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set",target:"_blank",rel:"noopener noreferrer"},Jt=n("code",null,"FIND_IN_SET()",-1),Zt=a(" function is optimized to use bit arithmetic. Returns <code>0</code> if <em><code>str</code></em> is not in <em><code>strlist</code></em> or if <em><code>strlist</code></em> is the empty string. Returns <code>NULL</code> if either argument is <code>NULL</code>. This function does not work properly if the first argument contains a comma (<code>,</code>) character.",15),$t=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> FIND_IN_SET<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a,b,c,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),na={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_format",target:"_blank",rel:"noopener noreferrer"},sa=n("code",null,"FORMAT(*",-1),ea=s("X"),ta=n("code",null,"*,*",-1),aa=s("D"),oa=n("code",null,"*[,*",-1),ca=s("locale"),ra=n("code",null,"*\\])",-1),la=a("<p>Formats the number <em><code>X</code></em> to a format like <code>&#39;#,###,###.##&#39;</code>, rounded to <em><code>D</code></em> decimal places, and returns the result as a string. If <em><code>D</code></em> is <code>0</code>, the result has no decimal point or fractional part.</p>",1),pa=s("The optional third parameter enables a locale to be specified to be used for the result number's decimal point, thousands separator, and grouping between separators. Permissible locale values are the same as the legal values for the "),ia={href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_lc_time_names",target:"_blank",rel:"noopener noreferrer"},da=n("code",null,"lc_time_names",-1),ua=s(" system variable ( see "),_a={href:"https://dev.mysql.com/doc/refman/8.0/en/locale-support.html",target:"_blank",rel:"noopener noreferrer"},ha=s("Section 10.16, \u201CMySQL Server Locale Support\u201D"),ma=s("). If no locale is specified, the default is "),ka=n("code",null,"'en_US'",-1),fa=s("."),ga=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.123456</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;12,332.1235&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;12,332.1000&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;12,332&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">12332.2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;de_DE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;12.332,20&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,1),ba={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64",target:"_blank",rel:"noopener noreferrer"},ya=n("code",null,"FROM_BASE64(*",-1),va=s("str"),Ea=n("code",null,"*)",-1),qa=s("Takes a string encoded with the base-64 encoded rules used by "),Ta={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64",target:"_blank",rel:"noopener noreferrer"},Sa=n("code",null,"TO_BASE64()",-1),La=s(" and returns the decoded result as a binary string. The result is "),xa=n("code",null,"NULL",-1),wa=s(" if the argument is "),Ra=n("code",null,"NULL",-1),Na=s(" or not a valid base-64 string. See the description of "),Ca={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64",target:"_blank",rel:"noopener noreferrer"},Ia=n("code",null,"TO_BASE64()",-1),Aa=s(" for details about the encoding and decoding rules."),Ha=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TO_BASE64<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FROM_BASE64<span class="token punctuation">(</span>TO_BASE64<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;JWJj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),Oa=s("If "),Ua={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64",target:"_blank",rel:"noopener noreferrer"},Ga=n("code",null,"FROM_BASE64()",-1),Ba=s(" is invoked from within the "),Fa={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},Xa=n("strong",null,"mysql",-1),Ma=s(" client, binary strings display using hexadecimal notation, depending on the value of the "),Da={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex",target:"_blank",rel:"noopener noreferrer"},Wa=n("code",null,"--binary-as-hex",-1),Pa=s(" . For more information about that option, see "),Qa={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},Ya=s("Section 4.5.1, \u201Cmysql \u2014 The MySQL Command-Line Client\u201D"),Va=s("."),Ka={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},ja=n("code",null,"HEX(*",-1),za=s("str"),Ja=n("code",null,"*)",-1),Za=s(" , "),$a={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},no=n("code",null,"HEX(*",-1),so=s("N"),eo=n("code",null,"*)",-1),to=s("For a string argument "),ao=n("em",null,[n("code",null,"str")],-1),oo=s(", "),co={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},ro=n("code",null,"HEX()",-1),lo=s(" returns a hexadecimal string representation of "),po=n("em",null,[n("code",null,"str")],-1),io=s(" where each byte of each character in "),uo=n("em",null,[n("code",null,"str")],-1),_o=s(" is converted to two hexadecimal digits. (Multibyte characters therefore become more than two digits.) The inverse of this operation is performed by the "),ho={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},mo=n("code",null,"UNHEX()",-1),ko=s(" function."),fo=s("For a numeric argument "),go=n("em",null,[n("code",null,"N")],-1),bo=s(", "),yo={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},vo=n("code",null,"HEX()",-1),Eo=s(" returns a hexadecimal string representation of the value of "),qo=n("em",null,[n("code",null,"N")],-1),To=s(" treated as a longlong ("),So={href:"https://dev.mysql.com/doc/refman/8.0/en/integer-types.html",target:"_blank",rel:"noopener noreferrer"},Lo=n("code",null,"BIGINT",-1),xo=s(") number. This is equivalent to "),wo={href:"https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv",target:"_blank",rel:"noopener noreferrer"},Ro=n("code",null,"CONV(*",-1),No=s("N"),Co=n("code",null,"*,10,16)",-1),Io=s(". The inverse of this operation is performed by "),Ao={href:"https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv",target:"_blank",rel:"noopener noreferrer"},Ho=n("code",null,"CONV(HEX(*",-1),Oo=s("N"),Uo=n("code",null,"*),16,10)",-1),Go=s("."),Bo=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> X<span class="token string">&#39;616263&#39;</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UNHEX<span class="token punctuation">(</span>HEX<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">616263</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CONV<span class="token punctuation">(</span>HEX<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;FF&#39;</span><span class="token punctuation">,</span> <span class="token number">255</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),Fo={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_insert",target:"_blank",rel:"noopener noreferrer"},Xo=n("code",null,"INSERT(*",-1),Mo=s("str"),Do=n("code",null,"*,*",-1),Wo=s("pos"),Po=n("code",null,"*,*",-1),Qo=s("len"),Yo=n("code",null,"*,*",-1),Vo=s("newstr"),Ko=n("code",null,"*)",-1),jo=a(`<p>Returns the string <em><code>str</code></em>, with the substring beginning at position <em><code>pos</code></em> and <em><code>len</code></em> characters long replaced by the string <em><code>newstr</code></em>. Returns the original string if <em><code>pos</code></em> is not within the length of the string. Replaces the rest of the string from position <em><code>pos</code></em> if <em><code>len</code></em> is not within the length of the rest of the string. Returns <code>NULL</code> if any argument is <code>NULL</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">&#39;Quadratic&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;What&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;QuWhattic&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">&#39;Quadratic&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;What&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Quadratic&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">&#39;Quadratic&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;What&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;QuWhat&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This function is multibyte safe.</p>`,3),zo={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_instr",target:"_blank",rel:"noopener noreferrer"},Jo=n("code",null,"INSTR(*",-1),Zo=s("str"),$o=n("code",null,"*,*",-1),nc=s("substr"),sc=n("code",null,"*)",-1),ec=s("Returns the position of the first occurrence of substring "),tc=n("em",null,[n("code",null,"substr")],-1),ac=s(" in string "),oc=n("em",null,[n("code",null,"str")],-1),cc=s(". This is the same as the two-argument form of "),rc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate",target:"_blank",rel:"noopener noreferrer"},lc=n("code",null,"LOCATE()",-1),pc=s(", except that the order of the arguments is reversed."),ic=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> INSTR<span class="token punctuation">(</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">4</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> INSTR<span class="token punctuation">(</span><span class="token string">&#39;xbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This function is multibyte safe, and is case-sensitive only if at least one argument is a binary string.</p>`,2),dc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lcase",target:"_blank",rel:"noopener noreferrer"},uc=n("code",null,"LCASE(*",-1),_c=s("str"),hc=n("code",null,"*)",-1),mc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lcase",target:"_blank",rel:"noopener noreferrer"},kc=n("code",null,"LCASE()",-1),fc=s(" is a synonym for "),gc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower",target:"_blank",rel:"noopener noreferrer"},bc=n("code",null,"LOWER()",-1),yc=s("."),vc=n("p",null,[n("code",null,"LCASE()"),s(" used in a view is rewritten as "),n("code",null,"LOWER()"),s(" when storing the view's definition. (Bug #12844279)")],-1),Ec={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_left",target:"_blank",rel:"noopener noreferrer"},qc=n("code",null,"LEFT(*",-1),Tc=s("str"),Sc=n("code",null,"*,*",-1),Lc=s("len"),xc=n("code",null,"*)",-1),wc=a(`<p>Returns the leftmost <em><code>len</code></em> characters from the string <em><code>str</code></em>, or <code>NULL</code> if any argument is <code>NULL</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;fooba&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,3),Rc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length",target:"_blank",rel:"noopener noreferrer"},Nc=n("code",null,"LENGTH(*",-1),Cc=s("str"),Ic=n("code",null,"*)",-1),Ac=s("Returns the length of the string "),Hc=n("em",null,[n("code",null,"str")],-1),Oc=s(", measured in bytes. A multibyte character counts as multiple bytes. This means that for a string containing five 2-byte characters, "),Uc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length",target:"_blank",rel:"noopener noreferrer"},Gc=n("code",null,"LENGTH()",-1),Bc=s(" returns "),Fc=n("code",null,"10",-1),Xc=s(", whereas "),Mc={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_char-length",target:"_blank",rel:"noopener noreferrer"},Dc=n("code",null,"CHAR_LENGTH()",-1),Wc=s(" returns "),Pc=n("code",null,"5",-1),Qc=s("."),Yc=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">4</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Note</p>`,2),Vc=s("The "),Kc=n("code",null,"Length()",-1),jc=s(" OpenGIS spatial function is named "),zc={href:"https://dev.mysql.com/doc/refman/8.0/en/gis-linestring-property-functions.html#function_st-length",target:"_blank",rel:"noopener noreferrer"},Jc=n("code",null,"ST_Length()",-1),Zc=s(" in MySQL."),$c={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_load-file",target:"_blank",rel:"noopener noreferrer"},nr=n("code",null,"LOAD_FILE(*",-1),sr=s("file_name"),er=n("code",null,"*)",-1),tr=s("Reads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the "),ar={href:"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file",target:"_blank",rel:"noopener noreferrer"},or=n("code",null,"FILE",-1),cr=s(" privilege. The file must be readable by the server and its size less than "),rr={href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet",target:"_blank",rel:"noopener noreferrer"},lr=n("code",null,"max_allowed_packet",-1),pr=s(" bytes. If the "),ir={href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_secure_file_priv",target:"_blank",rel:"noopener noreferrer"},dr=n("code",null,"secure_file_priv",-1),ur=s(" system variable is set to a nonempty directory name, the file to be loaded must be located in that directory. (Prior to MySQL 8.0.17, the file must be readable by all, not just readable by the server.)"),_r=n("p",null,[s("If the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns "),n("code",null,"NULL"),s(".")],-1),hr=s("The "),mr={href:"https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_character_set_filesystem",target:"_blank",rel:"noopener noreferrer"},kr=n("code",null,"character_set_filesystem",-1),fr=s(" system variable controls interpretation of file names that are given as literal strings."),gr=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">UPDATE</span> t
            <span class="token keyword">SET</span> blob_col<span class="token operator">=</span>LOAD_FILE<span class="token punctuation">(</span><span class="token string">&#39;/tmp/picture&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,1),br={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate",target:"_blank",rel:"noopener noreferrer"},yr=n("code",null,"LOCATE(*",-1),vr=s("substr"),Er=n("code",null,"*,*",-1),qr=s("str"),Tr=n("code",null,"*)",-1),Sr=s(" , "),Lr={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate",target:"_blank",rel:"noopener noreferrer"},xr=n("code",null,"LOCATE(*",-1),wr=s("substr"),Rr=n("code",null,"*,*",-1),Nr=s("str"),Cr=n("code",null,"*,*",-1),Ir=s("pos"),Ar=n("code",null,"*)",-1),Hr=a(`<p>The first syntax returns the position of the first occurrence of substring <em><code>substr</code></em> in string <em><code>str</code></em>. The second syntax returns the position of the first occurrence of substring <em><code>substr</code></em> in string <em><code>str</code></em>, starting at position <em><code>pos</code></em>. Returns <code>0</code> if <em><code>substr</code></em> is not in <em><code>str</code></em>. Returns <code>NULL</code> if any argument is <code>NULL</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LOCATE<span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">4</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LOCATE<span class="token punctuation">(</span><span class="token string">&#39;xbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LOCATE<span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">7</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This function is multibyte safe, and is case-sensitive only if at least one argument is a binary string.</p>`,3),Or={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower",target:"_blank",rel:"noopener noreferrer"},Ur=n("code",null,"LOWER(*",-1),Gr=s("str"),Br=n("code",null,"*)",-1),Fr=a(`<p>Returns the string <em><code>str</code></em> with all characters changed to lowercase according to the current character set mapping. The default is <code>utf8mb4</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">&#39;QUADRATICALLY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;quadratically&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),Xr={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower",target:"_blank",rel:"noopener noreferrer"},Mr=n("code",null,"LOWER()",-1),Dr=s(" ( and "),Wr={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper",target:"_blank",rel:"noopener noreferrer"},Pr=n("code",null,"UPPER()",-1),Qr=s(") are ineffective when applied to binary strings ("),Yr={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},Vr=n("code",null,"BINARY",-1),Kr=s(" , "),jr={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},zr=n("code",null,"VARBINARY",-1),Jr=s(" , "),Zr={href:"https://dev.mysql.com/doc/refman/8.0/en/blob.html",target:"_blank",rel:"noopener noreferrer"},$r=n("code",null,"BLOB",-1),nl=s("). To perform lettercase conversion of a binary string, first convert it to a nonbinary string using a character set appropriate for the data stored in the string:"),sl=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@str</span> <span class="token operator">=</span> <span class="token keyword">BINARY</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token variable">@str</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LOWER<span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token variable">@str</span> <span class="token keyword">USING</span> utf8mb4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------+------------------------------------+</span>
<span class="token operator">|</span> LOWER<span class="token punctuation">(</span><span class="token variable">@str</span><span class="token punctuation">)</span> <span class="token operator">|</span> LOWER<span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token variable">@str</span> <span class="token keyword">USING</span> utf8mb4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+------------------------------------+</span>
<span class="token operator">|</span> New York    <span class="token operator">|</span> new york                           <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+------------------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,1),el=s("For collations of Unicode character sets, "),tl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower",target:"_blank",rel:"noopener noreferrer"},al=n("code",null,"LOWER()",-1),ol=s(" and "),cl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper",target:"_blank",rel:"noopener noreferrer"},rl=n("code",null,"UPPER()",-1),ll=s(" work according to the Unicode Collation Algorithm (UCA) version in the collation name, if there is one, and UCA 4.0.0 if no version is specified. For example, "),pl=n("code",null,"utf8mb4_0900_ai_ci",-1),il=s(" and "),dl=n("code",null,"utf8_unicode_520_ci",-1),ul=s(" work according to UCA 9.0.0 and 5.2.0, respectively, whereas "),_l=n("code",null,"utf8_unicode_ci",-1),hl=s(" works according to UCA 4.0.0. See "),ml={href:"https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html",target:"_blank",rel:"noopener noreferrer"},kl=s("Section 10.10.1, \u201CUnicode Character Sets\u201D"),fl=s("."),gl=n("p",null,"This function is multibyte safe.",-1),bl=n("p",null,[n("code",null,"LCASE()"),s(" used within views is rewritten as "),n("code",null,"LOWER()"),s(".")],-1),yl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad",target:"_blank",rel:"noopener noreferrer"},vl=n("code",null,"LPAD(*",-1),El=s("str"),ql=n("code",null,"*,*",-1),Tl=s("len"),Sl=n("code",null,"*,*",-1),Ll=s("padstr"),xl=n("code",null,"*)",-1),wl=a(`<p>Returns the string <em><code>str</code></em>, left-padded with the string <em><code>padstr</code></em> to a length of <em><code>len</code></em> characters. If <em><code>str</code></em> is longer than <em><code>len</code></em>, the return value is shortened to <em><code>len</code></em> characters.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;??hi&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LPAD<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;??&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;h&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,2),Rl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ltrim",target:"_blank",rel:"noopener noreferrer"},Nl=n("code",null,"LTRIM(*",-1),Cl=s("str"),Il=n("code",null,"*)",-1),Al=a(`<p>Returns the string <em><code>str</code></em> with leading space characters removed.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> LTRIM<span class="token punctuation">(</span><span class="token string">&#39;  barbar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;barbar&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,3),Hl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_make-set",target:"_blank",rel:"noopener noreferrer"},Ol=n("code",null,"MAKE_SET(*",-1),Ul=s("bits"),Gl=n("code",null,"*,*",-1),Bl=s("str1"),Fl=n("code",null,"*,*",-1),Xl=s("str2"),Ml=n("code",null,"*,...)",-1),Dl=a(`<p>Returns a set value (a string containing substrings separated by <code>,</code> characters) consisting of the strings that have the corresponding bit in <em><code>bits</code></em> set. <em><code>str1</code></em> corresponds to bit 0, <em><code>str2</code></em> to bit 1, and so on. <code>NULL</code> values in <em><code>str1</code></em>, <em><code>str2</code></em>, <code>...</code> are not appended to the result.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> MAKE_SET<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> MAKE_SET<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;nice&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;hello,world&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> MAKE_SET<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;nice&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;hello&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> MAKE_SET<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,2),Wl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_mid",target:"_blank",rel:"noopener noreferrer"},Pl=n("code",null,"MID(*",-1),Ql=s("str"),Yl=n("code",null,"*,*",-1),Vl=s("pos"),Kl=n("code",null,"*,*",-1),jl=s("len"),zl=n("code",null,"*)",-1),Jl={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_mid",target:"_blank",rel:"noopener noreferrer"},Zl=n("code",null,"MID(*",-1),$l=s("str"),np=n("code",null,"*,*",-1),sp=s("pos"),ep=n("code",null,"*,*",-1),tp=s("len"),ap=n("code",null,"*)",-1),op=s(" is a synonym for "),cp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},rp=n("code",null,"SUBSTRING(*",-1),lp=s("str"),pp=n("code",null,"*,*",-1),ip=s("pos"),dp=n("code",null,"*,*",-1),up=s("len"),_p=n("code",null,"*)",-1),hp=s(" ."),mp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_oct",target:"_blank",rel:"noopener noreferrer"},kp=n("code",null,"OCT(*",-1),fp=s("N"),gp=n("code",null,"*)",-1),bp=s("Returns a string representation of the octal value of "),yp=n("em",null,[n("code",null,"N")],-1),vp=s(", where "),Ep=n("em",null,[n("code",null,"N")],-1),qp=s(" is a longlong ("),Tp={href:"https://dev.mysql.com/doc/refman/8.0/en/integer-types.html",target:"_blank",rel:"noopener noreferrer"},Sp=n("code",null,"BIGINT",-1),Lp=s(") number. This is equivalent to "),xp={href:"https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv",target:"_blank",rel:"noopener noreferrer"},wp=n("code",null,"CONV(*",-1),Rp=s("N"),Np=n("code",null,"*,10,8)",-1),Cp=s(". Returns "),Ip=n("code",null,"NULL",-1),Ap=s(" if "),Hp=n("em",null,[n("code",null,"N")],-1),Op=s(" is "),Up=n("code",null,"NULL",-1),Gp=s("."),Bp=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> OCT<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;14&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),Fp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_octet-length",target:"_blank",rel:"noopener noreferrer"},Xp=n("code",null,"OCTET_LENGTH(*",-1),Mp=s("str"),Dp=n("code",null,"*)",-1),Wp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_octet-length",target:"_blank",rel:"noopener noreferrer"},Pp=n("code",null,"OCTET_LENGTH()",-1),Qp=s(" is a synonym for "),Yp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_length",target:"_blank",rel:"noopener noreferrer"},Vp=n("code",null,"LENGTH()",-1),Kp=s("."),jp=a(`<h3 id="ord-str" tabindex="-1"><a class="header-anchor" href="#ord-str" aria-hidden="true">#</a> ORD(<em>str</em>)</h3><p>If the leftmost character of the string <em><code>str</code></em> is a multibyte character, returns the code for that character, calculated from the numeric values of its constituent bytes using this formula:</p><div class="language-clike ext-clike line-numbers-mode"><pre class="language-clike"><code>  <span class="token punctuation">(</span><span class="token number">1</span>st byte code<span class="token punctuation">)</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span>nd byte code <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span>rd byte code <span class="token operator">*</span> <span class="token number">256</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,3),zp=s("If the leftmost character is not a multibyte character, "),Jp={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ord",target:"_blank",rel:"noopener noreferrer"},Zp=n("code",null,"ORD()",-1),$p=s(" returns the same value as the "),ni={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ascii",target:"_blank",rel:"noopener noreferrer"},si=n("code",null,"ASCII()",-1),ei=s(" function."),ti=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> ORD<span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">50</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),ai={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_position",target:"_blank",rel:"noopener noreferrer"},oi=n("code",null,"POSITION(*",-1),ci=s("substr"),ri=n("code",null,"* IN *",-1),li=s("str"),pi=n("code",null,"*)",-1),ii={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_position",target:"_blank",rel:"noopener noreferrer"},di=n("code",null,"POSITION(*",-1),ui=s("substr"),_i=n("code",null,"* IN *",-1),hi=s("str"),mi=n("code",null,"*)",-1),ki=s(" is a synonym for "),fi={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_locate",target:"_blank",rel:"noopener noreferrer"},gi=n("code",null,"LOCATE(*",-1),bi=s("substr"),yi=n("code",null,"*,*",-1),vi=s("str"),Ei=n("code",null,"*)",-1),qi=s("."),Ti={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_quote",target:"_blank",rel:"noopener noreferrer"},Si=n("code",null,"QUOTE(*",-1),Li=s("str"),xi=n("code",null,"*)",-1),wi=a(`<p>Quotes a string to produce a result that can be used as a properly escaped data value in an SQL statement. The string is returned enclosed by single quotation marks and with each instance of backslash (<code>\\</code>), single quote (<code>&#39;</code>), ASCII <code>NUL</code>, and Control+Z preceded by a backslash. If the argument is <code>NULL</code>, the return value is the word \u201CNULL\u201D without enclosing single quotation marks.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> QUOTE<span class="token punctuation">(</span><span class="token string">&#39;Don\\&#39;t!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Don\\&#39;t!&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> QUOTE<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">NULL</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,2),Ri=s("For comparison, see the quoting rules for literal strings and within the C API in "),Ni={href:"https://dev.mysql.com/doc/refman/8.0/en/string-literals.html",target:"_blank",rel:"noopener noreferrer"},Ci=s("Section 9.1.1, \u201CString Literals\u201D"),Ii=s(", and "),Ai={href:"https://dev.mysql.com/doc/c-api/8.0/en/mysql-real-escape-string-quote.html",target:"_blank",rel:"noopener noreferrer"},Hi=s("mysql_real_escape_string_quote()"),Oi=s("."),Ui={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_repeat",target:"_blank",rel:"noopener noreferrer"},Gi=n("code",null,"REPEAT(*",-1),Bi=s("str"),Fi=n("code",null,"*,*",-1),Xi=s("count"),Mi=n("code",null,"*)",-1),Di=a(`<p>Returns a string consisting of the string <em><code>str</code></em> repeated <em><code>count</code></em> times. If <em><code>count</code></em> is less than 1, returns an empty string. Returns <code>NULL</code> if <em><code>str</code></em> or <em><code>count</code></em> are <code>NULL</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">REPEAT</span><span class="token punctuation">(</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQLMySQLMySQL&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),Wi={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace",target:"_blank",rel:"noopener noreferrer"},Pi=n("code",null,"REPLACE(*",-1),Qi=s("str"),Yi=n("code",null,"*,*",-1),Vi=s("from_str"),Ki=n("code",null,"*,*",-1),ji=s("to_str"),zi=n("code",null,"*)",-1),Ji=s("Returns the string "),Zi=n("em",null,[n("code",null,"str")],-1),$i=s(" with all occurrences of the string "),nd=n("em",null,[n("code",null,"from_str")],-1),sd=s(" replaced by the string "),ed=n("em",null,[n("code",null,"to_str")],-1),td=s(" . "),ad={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace",target:"_blank",rel:"noopener noreferrer"},od=n("code",null,"REPLACE()",-1),cd=s(" performs a case-sensitive match when searching for "),rd=n("em",null,[n("code",null,"from_str")],-1),ld=s("."),pd=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span><span class="token string">&#39;www.mysql.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;WwWwWw.mysql.com&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,2),id={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_reverse",target:"_blank",rel:"noopener noreferrer"},dd=n("code",null,"REVERSE(*",-1),ud=s("str"),_d=n("code",null,"*)",-1),hd=a(`<p>Returns the string <em><code>str</code></em> with the order of the characters reversed.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> REVERSE<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;cba&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,3),md={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_right",target:"_blank",rel:"noopener noreferrer"},kd=n("code",null,"RIGHT(*",-1),fd=s("str"),gd=n("code",null,"*,*",-1),bd=s("len"),yd=n("code",null,"*)",-1),vd=a(`<p>Returns the rightmost <em><code>len</code></em> characters from the string <em><code>str</code></em>, or <code>NULL</code> if any argument is <code>NULL</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;rbar&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,3),Ed={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rpad",target:"_blank",rel:"noopener noreferrer"},qd=n("code",null,"RPAD(*",-1),Td=s("str"),Sd=n("code",null,"*,*",-1),Ld=s("len"),xd=n("code",null,"*,*",-1),wd=s("padstr"),Rd=n("code",null,"*)",-1),Nd=a(`<p>Returns the string <em><code>str</code></em>, right-padded with the string <em><code>padstr</code></em> to a length of <em><code>len</code></em> characters. If <em><code>str</code></em> is longer than <em><code>len</code></em>, the return value is shortened to <em><code>len</code></em> characters.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;hi???&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> RPAD<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;h&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This function is multibyte safe.</p>`,3),Cd={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_rtrim",target:"_blank",rel:"noopener noreferrer"},Id=n("code",null,"RTRIM(*",-1),Ad=s("str"),Hd=n("code",null,"*)",-1),Od=a(`<p>Returns the string <em><code>str</code></em> with trailing space characters removed.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> RTRIM<span class="token punctuation">(</span><span class="token string">&#39;barbar   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;barbar&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This function is multibyte safe.</p>`,3),Ud={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex",target:"_blank",rel:"noopener noreferrer"},Gd=n("code",null,"SOUNDEX(*",-1),Bd=s("str"),Fd=n("code",null,"*)",-1),Xd=s("Returns a soundex string from "),Md=n("em",null,[n("code",null,"str")],-1),Dd=s(". Two strings that sound almost the same should have identical soundex strings. A standard soundex string is four characters long, but the "),Wd={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex",target:"_blank",rel:"noopener noreferrer"},Pd=n("code",null,"SOUNDEX()",-1),Qd=s(" function returns an arbitrarily long string. You can use "),Yd={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},Vd=n("code",null,"SUBSTRING()",-1),Kd=s(" on the result to get a standard soundex string. All nonalphabetic characters in "),jd=n("em",null,[n("code",null,"str")],-1),zd=s(" are ignored. All international alphabetic characters outside the A-Z range are treated as vowels."),Jd=n("p",null,"Important",-1),Zd=s("When using "),$d={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex",target:"_blank",rel:"noopener noreferrer"},nu=n("code",null,"SOUNDEX()",-1),su=s(", you should be aware of the following limitations:"),eu=a(`<ul><li>This function, as currently implemented, is intended to work well with strings that are in the English language only. Strings in other languages may not produce reliable results.</li><li>This function is not guaranteed to provide consistent results with strings that use multibyte character sets, including <code>utf-8</code>. See Bug #22638 for more information.</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;H400&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SOUNDEX<span class="token punctuation">(</span><span class="token string">&#39;Quadratically&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Q36324&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Note</p><p>This function implements the original Soundex algorithm, not the more popular enhanced version (also described by D. Knuth). The difference is that original version discards vowels first and duplicates second, whereas the enhanced version discards duplicates first and vowels second.</p>`,4),tu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#operator_sounds-like",target:"_blank",rel:"noopener noreferrer"},au=n("code",null,"*",-1),ou=s("expr1"),cu=n("code",null,"* SOUNDS LIKE *",-1),ru=s("expr2"),lu=n("code",null,"*",-1),pu=s("This is the same as "),iu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_soundex",target:"_blank",rel:"noopener noreferrer"},du=n("code",null,"SOUNDEX(*",-1),uu=s("expr1"),_u=n("code",null,"*) = SOUNDEX(*",-1),hu=s("expr2"),mu=n("code",null,"*)",-1),ku=s(" ."),fu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_space",target:"_blank",rel:"noopener noreferrer"},gu=n("code",null,"SPACE(*",-1),bu=s("N"),yu=n("code",null,"*)",-1),vu=a(`<p>Returns a string consisting of <em><code>N</code></em> space characters.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SPACE<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;      &#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),Eu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr",target:"_blank",rel:"noopener noreferrer"},qu=n("code",null,"SUBSTR(*",-1),Tu=s("str"),Su=n("code",null,"*,*",-1),Lu=s("pos"),xu=n("code",null,"*)",-1),wu=s(" , "),Ru={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr",target:"_blank",rel:"noopener noreferrer"},Nu=n("code",null,"SUBSTR(*",-1),Cu=s("str"),Iu=n("code",null,"* FROM *",-1),Au=s("pos"),Hu=n("code",null,"*)",-1),Ou=s(" , "),Uu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr",target:"_blank",rel:"noopener noreferrer"},Gu=n("code",null,"SUBSTR(*",-1),Bu=s("str"),Fu=n("code",null,"*,*",-1),Xu=s("pos"),Mu=n("code",null,"*,*",-1),Du=s("len"),Wu=n("code",null,"*)",-1),Pu=s(" , "),Qu={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr",target:"_blank",rel:"noopener noreferrer"},Yu=n("code",null,"SUBSTR(*",-1),Vu=s("str"),Ku=n("code",null,"* FROM *",-1),ju=s("pos"),zu=n("code",null,"* FOR *",-1),Ju=s("len"),Zu=n("code",null,"*)",-1),$u={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr",target:"_blank",rel:"noopener noreferrer"},n_=n("code",null,"SUBSTR()",-1),s_=s(" is a synonym for "),e_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},t_=n("code",null,"SUBSTRING()",-1),a_=s("."),o_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},c_=n("code",null,"SUBSTRING(*",-1),r_=s("str"),l_=n("code",null,"*,*",-1),p_=s("pos"),i_=n("code",null,"*)",-1),d_=s(" , "),u_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},__=n("code",null,"SUBSTRING(*",-1),h_=s("str"),m_=n("code",null,"* FROM *",-1),k_=s("pos"),f_=n("code",null,"*)",-1),g_=s(" , "),b_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},y_=n("code",null,"SUBSTRING(*",-1),v_=s("str"),E_=n("code",null,"*,*",-1),q_=s("pos"),T_=n("code",null,"*,*",-1),S_=s("len"),L_=n("code",null,"*)",-1),x_=s(" , "),w_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},R_=n("code",null,"SUBSTRING(*",-1),N_=s("str"),C_=n("code",null,"* FROM *",-1),I_=s("pos"),A_=n("code",null,"* FOR *",-1),H_=s("len"),O_=n("code",null,"*)",-1),U_=a("<p>The forms without a <em><code>len</code></em> argument return a substring from string <em><code>str</code></em> starting at position <em><code>pos</code></em>. The forms with a <em><code>len</code></em> argument return a substring <em><code>len</code></em> characters long from string <em><code>str</code></em>, starting at position <em><code>pos</code></em>. The forms that use <code>FROM</code> are standard SQL syntax. It is also possible to use a negative value for <em><code>pos</code></em>. In this case, the beginning of the substring is <em><code>pos</code></em> characters from the end of the string, rather than the beginning. A negative value may be used for <em><code>pos</code></em> in any of the forms of this function. A value of 0 for <em><code>pos</code></em> returns an empty string.</p>",1),G_=s("For all forms of "),B_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring",target:"_blank",rel:"noopener noreferrer"},F_=n("code",null,"SUBSTRING()",-1),X_=s(", the position of the first character in the string from which the substring is to be extracted is reckoned as "),M_=n("code",null,"1",-1),D_=s("."),W_=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;Quadratically&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;ratically&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;foobarbar&#39;</span> <span class="token keyword">FROM</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;barbar&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;Quadratically&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;ratica&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;Sakila&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;ila&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;Sakila&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;aki&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;Sakila&#39;</span> <span class="token keyword">FROM</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token keyword">FOR</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;ki&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>This function is multibyte safe.</p><p>If <em><code>len</code></em> is less than 1, the result is the empty string.</p>`,3),P_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring-index",target:"_blank",rel:"noopener noreferrer"},Q_=n("code",null,"SUBSTRING_INDEX(*",-1),Y_=s("str"),V_=n("code",null,"*,*",-1),K_=s("delim"),j_=n("code",null,"*,*",-1),z_=s("count"),J_=n("code",null,"*)",-1),Z_=a("Returns the substring from string <em><code>str</code></em> before <em><code>count</code></em> occurrences of the delimiter <em><code>delim</code></em>. If <em><code>count</code></em> is positive, everything to the left of the final delimiter (counting from the left) is returned. If <em><code>count</code></em> is negative, everything to the right of the final delimiter (counting from the right) is returned. ",11),$_={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substring-index",target:"_blank",rel:"noopener noreferrer"},nh=n("code",null,"SUBSTRING_INDEX()",-1),sh=s(" performs a case-sensitive match when searching for "),eh=n("em",null,[n("code",null,"delim")],-1),th=s("."),ah=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING_INDEX<span class="token punctuation">(</span><span class="token string">&#39;www.mysql.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;www.mysql&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> SUBSTRING_INDEX<span class="token punctuation">(</span><span class="token string">&#39;www.mysql.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;mysql.com&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This function is multibyte safe.</p>`,2),oh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64",target:"_blank",rel:"noopener noreferrer"},ch=n("code",null,"TO_BASE64(*",-1),rh=s("str"),lh=n("code",null,"*)",-1),ph=s("Converts the string argument to base-64 encoded form and returns the result as a character string with the connection character set and collation. If the argument is not a string, it is converted to a string before conversion takes place. The result is "),ih=n("code",null,"NULL",-1),dh=s(" if the argument is "),uh=n("code",null,"NULL",-1),_h=s(". Base-64 encoded strings can be decoded using the "),hh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64",target:"_blank",rel:"noopener noreferrer"},mh=n("code",null,"FROM_BASE64()",-1),kh=s(" function."),fh=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TO_BASE64<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FROM_BASE64<span class="token punctuation">(</span>TO_BASE64<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;JWJj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,1),gh=s("Different base-64 encoding schemes exist. These are the encoding and decoding rules used by "),bh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_to-base64",target:"_blank",rel:"noopener noreferrer"},yh=n("code",null,"TO_BASE64()",-1),vh=s(" and "),Eh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_from-base64",target:"_blank",rel:"noopener noreferrer"},qh=n("code",null,"FROM_BASE64()",-1),Th=s(":"),Sh=a("<ul><li>The encoding for alphabet value 62 is <code>&#39;+&#39;</code>.</li><li>The encoding for alphabet value 63 is <code>&#39;/&#39;</code>.</li><li>Encoded output consists of groups of 4 printable characters. Each 3 bytes of the input data are encoded using 4 characters. If the last group is incomplete, it is padded with <code>&#39;=&#39;</code> characters to a length of 4.</li><li>A newline is added after each 76 characters of encoded output to divide long output into multiple lines.</li><li>Decoding recognizes and ignores newline, carriage return, tab, and space.</li></ul>",1),Lh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim",target:"_blank",rel:"noopener noreferrer"},xh=n("code",null,"TRIM([{BOTH | LEADING | TRAILING} [*",-1),wh=s("remstr"),Rh=n("code",null,"*\\] FROM] *",-1),Nh=s("str"),Ch=n("code",null,"*)",-1),Ih=s(" , "),Ah={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_trim",target:"_blank",rel:"noopener noreferrer"},Hh=n("code",null,"TRIM([*",-1),Oh=s("remstr"),Uh=n("code",null,"* FROM\\] *",-1),Gh=s("str"),Bh=n("code",null,"*)",-1),Fh=a(`<p>Returns the string <em><code>str</code></em> with all <em><code>remstr</code></em> prefixes or suffixes removed. If none of the specifiers <code>BOTH</code> , <code>LEADING</code>, or <code>TRAILING</code> is given, <code>BOTH</code> is assumed. <em><code>remstr</code></em> is optional and, if not specified, spaces are removed.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span><span class="token string">&#39;  bar   &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;bar&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span>LEADING <span class="token string">&#39;x&#39;</span> <span class="token keyword">FROM</span> <span class="token string">&#39;xxxbarxxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;barxxx&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span>BOTH <span class="token string">&#39;x&#39;</span> <span class="token keyword">FROM</span> <span class="token string">&#39;xxxbarxxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;bar&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> TRIM<span class="token punctuation">(</span>TRAILING <span class="token string">&#39;xyz&#39;</span> <span class="token keyword">FROM</span> <span class="token string">&#39;barxxyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;barx&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This function is multibyte safe.</p>`,3),Xh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ucase",target:"_blank",rel:"noopener noreferrer"},Mh=n("code",null,"UCASE(*",-1),Dh=s("str"),Wh=n("code",null,"*)",-1),Ph={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_ucase",target:"_blank",rel:"noopener noreferrer"},Qh=n("code",null,"UCASE()",-1),Yh=s(" is a synonym for "),Vh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper",target:"_blank",rel:"noopener noreferrer"},Kh=n("code",null,"UPPER()",-1),jh=s("."),zh=n("p",null,[n("code",null,"UCASE()"),s(" used within views is rewritten as "),n("code",null,"UPPER()"),s(".")],-1),Jh={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},Zh=n("code",null,"UNHEX(*",-1),$h=s("str"),nm=n("code",null,"*)",-1),sm=s("For a string argument "),em=n("em",null,[n("code",null,"str")],-1),tm=s(" , "),am={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},om=n("code",null,"UNHEX(*",-1),cm=s("str"),rm=n("code",null,"*)",-1),lm=s(" interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number. The return value is a binary string."),pm=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> UNHEX<span class="token punctuation">(</span><span class="token string">&#39;4D7953514C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQL&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> X<span class="token string">&#39;4D7953514C&#39;</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;MySQL&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> UNHEX<span class="token punctuation">(</span>HEX<span class="token punctuation">(</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;string&#39;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>UNHEX<span class="token punctuation">(</span><span class="token string">&#39;1267&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;1267&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The characters in the argument string must be legal hexadecimal digits: <code>&#39;0&#39;</code> .. <code>&#39;9&#39;</code>, <code>&#39;A&#39;</code> .. <code>&#39;F&#39;</code>, <code>&#39;a&#39;</code> .. <code>&#39;f&#39;</code> . If the argument contains any nonhexadecimal digits, the result is <code>NULL</code>:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> UNHEX<span class="token punctuation">(</span><span class="token string">&#39;GG&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------+</span>
<span class="token operator">|</span> UNHEX<span class="token punctuation">(</span><span class="token string">&#39;GG&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+</span>
<span class="token operator">|</span> <span class="token boolean">NULL</span>        <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,3),im=s("A "),dm=n("code",null,"NULL",-1),um=s(" result can occur if the argument to "),_m={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},hm=n("code",null,"UNHEX()",-1),mm=s(" is a "),km={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},fm=n("code",null,"BINARY",-1),gm=s(" column, because values are padded with "),bm=n("code",null,"0x00",-1),ym=s(" bytes when stored but those bytes are not stripped on retrieval. For example, "),vm=n("code",null,"'41'",-1),Em=s(" is stored into a "),qm=n("code",null,"CHAR(3)",-1),Tm=s(" column as "),Sm=n("code",null,"'41 '",-1),Lm=s(" and retrieved as "),xm=n("code",null,"'41'",-1),wm=s(" (with the trailing pad space stripped), so "),Rm={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},Nm=n("code",null,"UNHEX()",-1),Cm=a(" for the column value returns <code>X&#39;41&#39;</code>. By contrast, <code>&#39;41&#39;</code> is stored into a <code>BINARY(3)</code> column as <code>&#39;41\\0&#39;</code> and retrieved as <code>&#39;41\\0&#39;</code> (with the trailing pad <code>0x00</code> byte not stripped). <code>&#39;\\0&#39;</code> is not a legal hexadecimal digit, so ",15),Im={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},Am=n("code",null,"UNHEX()",-1),Hm=s(" for the column value returns "),Om=n("code",null,"NULL",-1),Um=s("."),Gm=s("For a numeric argument "),Bm=n("em",null,[n("code",null,"N")],-1),Fm=s(", the inverse of "),Xm={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},Mm=n("code",null,"HEX(*",-1),Dm=s("N"),Wm=n("code",null,"*)",-1),Pm=s(" is not performed by "),Qm={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},Ym=n("code",null,"UNHEX()",-1),Vm=s(". Use "),Km={href:"https://dev.mysql.com/doc/refman/8.0/en/mathematical-functions.html#function_conv",target:"_blank",rel:"noopener noreferrer"},jm=n("code",null,"CONV(HEX(*",-1),zm=s("N"),Jm=n("code",null,"*),16,10)",-1),Zm=s(" instead. See the description of "),$m={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},nk=n("code",null,"HEX()",-1),sk=s("."),ek=s("If "),tk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_unhex",target:"_blank",rel:"noopener noreferrer"},ak=n("code",null,"UNHEX()",-1),ok=s(" is invoked from within the "),ck={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},rk=n("strong",null,"mysql",-1),lk=s(" client, binary strings display using hexadecimal notation, depending on the value of the "),pk={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex",target:"_blank",rel:"noopener noreferrer"},ik=n("code",null,"--binary-as-hex",-1),dk=s(" . For more information about that option, see "),uk={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},_k=s("Section 4.5.1, \u201Cmysql \u2014 The MySQL Command-Line Client\u201D"),hk=s("."),mk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper",target:"_blank",rel:"noopener noreferrer"},kk=n("code",null,"UPPER(*",-1),fk=s("str"),gk=n("code",null,"*)",-1),bk=a(`<p>Returns the string <em><code>str</code></em> with all characters changed to uppercase according to the current character set mapping. The default is <code>utf8mb4</code>.</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> UPPER<span class="token punctuation">(</span><span class="token string">&#39;Hej&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;HEJ&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,2),yk=s("See the description of "),vk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lower",target:"_blank",rel:"noopener noreferrer"},Ek=n("code",null,"LOWER()",-1),qk=s(" for information that also applies to "),Tk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_upper",target:"_blank",rel:"noopener noreferrer"},Sk=n("code",null,"UPPER()",-1),Lk=s(". This included information about how to perform lettercase conversion of binary strings ("),xk={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},wk=n("code",null,"BINARY",-1),Rk=s(" , "),Nk={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},Ck=n("code",null,"VARBINARY",-1),Ik=s(" , "),Ak={href:"https://dev.mysql.com/doc/refman/8.0/en/blob.html",target:"_blank",rel:"noopener noreferrer"},Hk=n("code",null,"BLOB",-1),Ok=s(") for which these functions are ineffective, and information about case folding for Unicode character sets."),Uk=n("p",null,"This function is multibyte safe.",-1),Gk=n("p",null,[n("code",null,"UCASE()"),s(" used within views is rewritten as "),n("code",null,"UPPER()"),s(".")],-1),Bk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},Fk=n("code",null,"WEIGHT_STRING(*",-1),Xk=s("str"),Mk=n("code",null,"* [AS {CHAR|BINARY}(*",-1),Dk=s("N"),Wk=n("code",null,"*)\\] [*",-1),Pk=s("flags"),Qk=n("code",null,"*])",-1),Yk=n("p",null,"This function returns the weight string for the input string. The return value is a binary string that represents the comparison and sorting value of the string. It has these properties:",-1),Vk=n("ul",null,[n("li")],-1),Kk={id:"if-weight-string-str1-weight-string-str2-then-str1-str2-str1-and-str2-are-considered-equal",tabindex:"-1"},jk=n("a",{class:"header-anchor",href:"#if-weight-string-str1-weight-string-str2-then-str1-str2-str1-and-str2-are-considered-equal","aria-hidden":"true"},"#",-1),zk=s(" If "),Jk={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},Zk=n("code",null,"WEIGHT_STRING(*",-1),$k=s("str1"),nf=n("code",null,"*)",-1),sf=s(" = "),ef={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},tf=n("code",null,"WEIGHT_STRING(*",-1),af=s("str2"),of=n("code",null,"*)",-1),cf=s(", then "),rf=n("code",null,"*",-1),lf=s("str1"),pf=n("code",null,"* = *",-1),df=s("str2"),uf=n("code",null,"*",-1),_f=s(" ("),hf=n("em",null,[n("code",null,"str1")],-1),mf=s(" and "),kf=n("em",null,[n("code",null,"str2")],-1),ff=s(" are considered equal)"),gf=s("If "),bf={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},yf=n("code",null,"WEIGHT_STRING(*",-1),vf=s("str1"),Ef=n("code",null,"*)",-1),qf=s(" < "),Tf={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},Sf=n("code",null,"WEIGHT_STRING(*",-1),Lf=s("str2"),xf=n("code",null,"*)",-1),wf=s(" , then "),Rf=n("code",null,"*",-1),Nf=s("str1"),Cf=n("code",null,"* < *",-1),If=s("str2"),Af=n("code",null,"*",-1),Hf=s(" ("),Of=n("em",null,[n("code",null,"str1")],-1),Uf=s(" sorts before "),Gf=n("em",null,[n("code",null,"str2")],-1),Bf=s(")"),Ff={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},Xf=n("code",null,"WEIGHT_STRING()",-1),Mf=s(" is a debugging function intended for internal use. Its behavior can change without notice between MySQL versions. It can be used for testing and debugging of collations, especially if you are adding a new collation. See "),Df={href:"https://dev.mysql.com/doc/refman/8.0/en/adding-collation.html",target:"_blank",rel:"noopener noreferrer"},Wf=s("Section 10.14, \u201CAdding a Collation to a Character Set\u201D"),Pf=s(" ."),Qf=n("p",null,"This list briefly summarizes the arguments. More details are given in the discussion following the list.",-1),Yf=n("ul",null,[n("li",null,[n("em",null,[n("code",null,"str")]),s(": The input string expression.")]),n("li",null,[n("code",null,"AS"),s(" clause: Optional; cast the input string to a given type and length.")]),n("li",null,[n("em",null,[n("code",null,"flags")]),s(": Optional; unused.")])],-1),Vf=s("The input string, "),Kf=n("em",null,[n("code",null,"str")],-1),jf=s(", is a string expression. If the input is a nonbinary (character) string such as a "),zf={href:"https://dev.mysql.com/doc/refman/8.0/en/char.html",target:"_blank",rel:"noopener noreferrer"},Jf=n("code",null,"CHAR",-1),Zf=s(" , "),$f={href:"https://dev.mysql.com/doc/refman/8.0/en/char.html",target:"_blank",rel:"noopener noreferrer"},ng=n("code",null,"VARCHAR",-1),sg=s(", or "),eg={href:"https://dev.mysql.com/doc/refman/8.0/en/blob.html",target:"_blank",rel:"noopener noreferrer"},tg=n("code",null,"TEXT",-1),ag=s(" value, the return value contains the collation weights for the string. If the input is a binary (byte) string such as a "),og={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},cg=n("code",null,"BINARY",-1),rg=s(" , "),lg={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},pg=n("code",null,"VARBINARY",-1),ig=s(", or "),dg={href:"https://dev.mysql.com/doc/refman/8.0/en/blob.html",target:"_blank",rel:"noopener noreferrer"},ug=n("code",null,"BLOB",-1),_g=s(" value, the return value is the same as the input (the weight for each byte in a binary string is the byte value). If the input is "),hg=n("code",null,"NULL",-1),mg=s(" , "),kg={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},fg=n("code",null,"WEIGHT_STRING()",-1),gg=s(" returns "),bg=n("code",null,"NULL",-1),yg=s("."),vg=a(`<p>Examples:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@s</span> <span class="token operator">=</span> _utf8mb4 <span class="token string">&#39;AB&#39;</span> <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token variable">@s</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> <span class="token variable">@s</span>   <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> AB   <span class="token operator">|</span> <span class="token number">4142</span>    <span class="token operator">|</span> <span class="token number">1</span>C471C60               <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@s</span> <span class="token operator">=</span> _utf8mb4 <span class="token string">&#39;ab&#39;</span> <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token variable">@s</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> <span class="token variable">@s</span>   <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> ab   <span class="token operator">|</span> <span class="token number">6162</span>    <span class="token operator">|</span> <span class="token number">1</span>C471C60               <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@s</span> <span class="token operator">=</span> CAST<span class="token punctuation">(</span><span class="token string">&#39;AB&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">BINARY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token variable">@s</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> <span class="token variable">@s</span>   <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> AB   <span class="token operator">|</span> <span class="token number">4142</span>    <span class="token operator">|</span> <span class="token number">4142</span>                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@s</span> <span class="token operator">=</span> CAST<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">BINARY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token variable">@s</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">,</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> <span class="token variable">@s</span>   <span class="token operator">|</span> HEX<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span> <span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
<span class="token operator">|</span> ab   <span class="token operator">|</span> <span class="token number">6162</span>    <span class="token operator">|</span> <span class="token number">6162</span>                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------+---------+------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,5),Eg=s("The preceding examples use "),qg={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},Tg=n("code",null,"HEX()",-1),Sg=s(" to display the "),Lg={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},xg=n("code",null,"WEIGHT_STRING()",-1),wg=s(" result. Because the result is a binary value, "),Rg={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_hex",target:"_blank",rel:"noopener noreferrer"},Ng=n("code",null,"HEX()",-1),Cg=s(" can be especially useful when the result contains nonprinting values, to display it in printable form:"),Ig=a(`<div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> <span class="token variable">@s</span> <span class="token operator">=</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span>X<span class="token string">&#39;C39F&#39;</span> <span class="token keyword">USING</span> utf8<span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8_czech_ci<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
<span class="token operator">|</span> <span class="token number">0</span>FEA0FEA               <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,1),Ag=s("For non-"),Hg=n("code",null,"NULL",-1),Og=s(" return values, the data type of the value is "),Ug={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},Gg=n("code",null,"VARBINARY",-1),Bg=s(" if its length is within the maximum length for "),Fg={href:"https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html",target:"_blank",rel:"noopener noreferrer"},Xg=n("code",null,"VARBINARY",-1),Mg=s(", otherwise the data type is "),Dg={href:"https://dev.mysql.com/doc/refman/8.0/en/blob.html",target:"_blank",rel:"noopener noreferrer"},Wg=n("code",null,"BLOB",-1),Pg=s("."),Qg=a(`<p>The <code>AS</code> clause may be given to cast the input string to a nonbinary or binary string and to force it to a given length:</p><ul><li><code>AS CHAR(*</code>N<code>*)</code> casts the string to a nonbinary string and pads it on the right with spaces to a length of <em><code>N</code></em> characters. <em><code>N</code></em> must be at least 1. If <em><code>N</code></em> is less than the length of the input string, the string is truncated to <em><code>N</code></em> characters. No warning occurs for truncation.</li><li><code>AS BINARY(*</code>N<code>*)</code> is similar but casts the string to a binary string, <em><code>N</code></em> is measured in bytes (not characters) , and padding uses <code>0x00</code> bytes (not spaces).</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> NAMES <span class="token string">&#39;latin1&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
<span class="token operator">|</span> <span class="token number">41422020</span>                            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> NAMES <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
<span class="token operator">|</span> <span class="token number">0041004200200020</span>                    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">BINARY</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------------------------+</span>
<span class="token operator">|</span> HEX<span class="token punctuation">(</span>WEIGHT_STRING<span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">BINARY</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------------+</span>
<span class="token operator">|</span> <span class="token number">61620000</span>                              <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------------+</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The <em><code>flags</code></em> clause currently is unused.</p>`,5),Yg=s("If "),Vg={href:"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_weight-string",target:"_blank",rel:"noopener noreferrer"},Kg=n("code",null,"WEIGHT_STRING()",-1),jg=s(" is invoked from within the "),zg={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},Jg=n("strong",null,"mysql",-1),Zg=s(" client, binary strings display using hexadecimal notation, depending on the value of the "),$g={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex",target:"_blank",rel:"noopener noreferrer"},n1=n("code",null,"--binary-as-hex",-1),s1=s(" . For more information about that option, see "),e1={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql.html",target:"_blank",rel:"noopener noreferrer"},t1=s("Section 4.5.1, \u201Cmysql \u2014 The MySQL Command-Line Client\u201D"),a1=s("."),o1={id:"_12-9-what-calendar-is-used-by-mysql",tabindex:"-1"},c1=n("a",{class:"header-anchor",href:"#_12-9-what-calendar-is-used-by-mysql","aria-hidden":"true"},"#",-1),r1=s(),l1={href:"https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",target:"_blank",rel:"noopener noreferrer"},p1=s("12.9 What Calendar Is Used By MySQL?"),i1={id:"_12-10-full-text-search-functions",tabindex:"-1"},d1=n("a",{class:"header-anchor",href:"#_12-10-full-text-search-functions","aria-hidden":"true"},"#",-1),u1=s(),_1={href:"https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html",target:"_blank",rel:"noopener noreferrer"},h1=s("12.10 Full-Text Search Functions"),m1={id:"_12-11-cast-functions-and-operators",tabindex:"-1"},k1=n("a",{class:"header-anchor",href:"#_12-11-cast-functions-and-operators","aria-hidden":"true"},"#",-1),f1=s(),g1={href:"https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html",target:"_blank",rel:"noopener noreferrer"},b1=s("12.11 Cast Functions and Operators"),y1={id:"_12-12-xml-functions",tabindex:"-1"},v1=n("a",{class:"header-anchor",href:"#_12-12-xml-functions","aria-hidden":"true"},"#",-1),E1=s(),q1={href:"https://dev.mysql.com/doc/refman/8.0/en/xml-functions.html",target:"_blank",rel:"noopener noreferrer"},T1=s("12.12 XML Functions"),S1={id:"_12-13-bit-functions-and-operators",tabindex:"-1"},L1=n("a",{class:"header-anchor",href:"#_12-13-bit-functions-and-operators","aria-hidden":"true"},"#",-1),x1=s(),w1={href:"https://dev.mysql.com/doc/refman/8.0/en/bit-functions.html",target:"_blank",rel:"noopener noreferrer"},R1=s("12.13 Bit Functions and Operators"),N1={id:"_12-14-encryption-and-compression-functions",tabindex:"-1"},C1=n("a",{class:"header-anchor",href:"#_12-14-encryption-and-compression-functions","aria-hidden":"true"},"#",-1),I1=s(),A1={href:"https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html",target:"_blank",rel:"noopener noreferrer"},H1=s("12.14 Encryption and Compression Functions"),O1={id:"_12-15-locking-functions",tabindex:"-1"},U1=n("a",{class:"header-anchor",href:"#_12-15-locking-functions","aria-hidden":"true"},"#",-1),G1=s(),B1={href:"https://dev.mysql.com/doc/refman/8.0/en/locking-functions.html",target:"_blank",rel:"noopener noreferrer"},F1=s("12.15 Locking Functions"),X1={id:"_12-16-information-functions",tabindex:"-1"},M1=n("a",{class:"header-anchor",href:"#_12-16-information-functions","aria-hidden":"true"},"#",-1),D1=s(),W1={href:"https://dev.mysql.com/doc/refman/8.0/en/information-functions.html",target:"_blank",rel:"noopener noreferrer"},P1=s("12.16 Information Functions"),Q1={id:"_12-17-spatial-analysis-functions",tabindex:"-1"},Y1=n("a",{class:"header-anchor",href:"#_12-17-spatial-analysis-functions","aria-hidden":"true"},"#",-1),V1=s(),K1={href:"https://dev.mysql.com/doc/refman/8.0/en/spatial-analysis-functions.html",target:"_blank",rel:"noopener noreferrer"},j1=s("12.17 Spatial Analysis Functions"),z1={id:"_12-18-json-functions",tabindex:"-1"},J1=n("a",{class:"header-anchor",href:"#_12-18-json-functions","aria-hidden":"true"},"#",-1),Z1=s(),$1={href:"https://dev.mysql.com/doc/refman/8.0/en/json-functions.html",target:"_blank",rel:"noopener noreferrer"},nb=s("12.18 JSON Functions"),sb={id:"_12-19-functions-used-with-global-transaction-identifiers-gtids",tabindex:"-1"},eb=n("a",{class:"header-anchor",href:"#_12-19-functions-used-with-global-transaction-identifiers-gtids","aria-hidden":"true"},"#",-1),tb=s(),ab={href:"https://dev.mysql.com/doc/refman/8.0/en/gtid-functions.html",target:"_blank",rel:"noopener noreferrer"},ob=s("12.19 Functions Used with Global Transaction Identifiers (GTIDs)"),cb={id:"_12-20-aggregate-functions",tabindex:"-1"},rb=n("a",{class:"header-anchor",href:"#_12-20-aggregate-functions","aria-hidden":"true"},"#",-1),lb=s(),pb={href:"https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions-and-modifiers.html",target:"_blank",rel:"noopener noreferrer"},ib=s("12.20 Aggregate Functions"),db={id:"_12-21-window-functions",tabindex:"-1"},ub=n("a",{class:"header-anchor",href:"#_12-21-window-functions","aria-hidden":"true"},"#",-1),_b=s(),hb={href:"https://dev.mysql.com/doc/refman/8.0/en/window-functions.html",target:"_blank",rel:"noopener noreferrer"},mb=s("12.21 Window Functions"),kb={id:"_12-22-performance-schema-functions",tabindex:"-1"},fb=n("a",{class:"header-anchor",href:"#_12-22-performance-schema-functions","aria-hidden":"true"},"#",-1),gb=s(),bb={href:"https://dev.mysql.com/doc/refman/8.0/en/performance-schema-functions.html",target:"_blank",rel:"noopener noreferrer"},yb=s("12.22 Performance Schema Functions"),vb={id:"_12-23-internal-functions",tabindex:"-1"},Eb=n("a",{class:"header-anchor",href:"#_12-23-internal-functions","aria-hidden":"true"},"#",-1),qb=s(),Tb={href:"https://dev.mysql.com/doc/refman/8.0/en/internal-functions.html",target:"_blank",rel:"noopener noreferrer"},Sb=s("12.23 Internal Functions"),Lb={id:"_12-24-miscellaneous-functions",tabindex:"-1"},xb=n("a",{class:"header-anchor",href:"#_12-24-miscellaneous-functions","aria-hidden":"true"},"#",-1),wb=s(),Rb={href:"https://dev.mysql.com/doc/refman/8.0/en/miscellaneous-functions.html",target:"_blank",rel:"noopener noreferrer"},Nb=s("12.24 Miscellaneous Functions"),Cb={id:"_12-25-precision-math",tabindex:"-1"},Ib=n("a",{class:"header-anchor",href:"#_12-25-precision-math","aria-hidden":"true"},"#",-1),Ab=s(),Hb={href:"https://dev.mysql.com/doc/refman/8.0/en/precision-math.html",target:"_blank",rel:"noopener noreferrer"},Ob=s("12.25 Precision Math");function Ub(Gb,Bb){const t=o("OutboundLink"),c=o("RouterLink");return r(),l(i,null,[n("h1",_,[h,m,n("a",k,[f,e(t)])]),n("h2",g,[b,y,n("a",v,[E,e(t)])]),n("h2",q,[T,S,n("a",L,[x,e(t)])]),n("h2",w,[R,N,n("a",C,[I,e(t)])]),n("h2",A,[H,O,n("a",U,[G,e(t)])]),n("h2",B,[F,X,n("a",M,[D,e(t)])]),n("h2",W,[P,Q,n("a",Y,[V,e(t)])]),K,n("h4",j,[z,J,n("a",Z,[$,nn,sn,en,tn,e(t)])]),n("h2",an,[on,cn,n("a",rn,[ln,e(t)])]),n("h2",pn,[dn,un,n("a",_n,[hn,e(t)])]),mn,n("p",null,[kn,fn,gn,bn,yn,e(c,{to:"/5_mysql_server_administration.html#5.1.1%20%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8"},{default:p(()=>[vn]),_:1}),En]),qn,Tn,n("h4",Sn,[Ln,xn,n("a",wn,[Rn,e(t)])]),Nn,n("h4",Cn,[In,An,n("a",Hn,[On,e(t)])]),Un,n("h4",Gn,[Bn,Fn,n("a",Xn,[Mn,e(t)])]),Dn,n("h4",Wn,[Pn,Qn,n("a",Yn,[Vn,e(t)])]),Kn,n("p",null,[jn,zn,Jn,Zn,$n,n("a",ns,[ss,e(t)]),es,ts,as]),n("ul",null,[n("li",null,[n("p",null,[n("a",os,[cs,rs,ls,e(t)])]),n("p",null,[ps,is,ds,n("a",us,[_s,e(t)]),hs,ms,ks,n("a",fs,[gs,e(t)]),bs,ys,vs])]),n("li",null,[n("p",null,[n("a",Es,[qs,Ts,Ss,e(t)])]),n("p",null,[n("a",Ls,[xs,e(t)]),ws,n("a",Rs,[Ns,e(t)]),Cs])]),n("li",null,[n("p",null,[n("a",Is,[As,Hs,Os,Us,Gs,e(t)])]),Bs,n("p",null,[n("a",Fs,[Xs,e(t)]),Ms,Ds,Ws,Ps,Qs]),Ys,n("p",null,[Vs,n("a",Ks,[js,e(t)]),zs,n("a",Js,[Zs,e(t)]),$s,n("a",ne,[se,e(t)]),ee,n("a",te,[ae,e(t)]),oe])]),n("li",null,[n("p",null,[n("a",ce,[re,le,pe,ie,de,ue,_e,e(t)])]),n("p",null,[n("a",he,[me,e(t)]),ke,n("a",fe,[ge,e(t)]),be,ye,ve,Ee,qe]),Te,n("p",null,[n("a",Se,[Le,e(t)]),xe,we,Re])]),n("li",null,[n("p",null,[n("a",Ne,[Ce,Ie,Ae,He,Oe,Ue,Ge,Be,Fe,e(t)])]),n("p",null,[n("a",Xe,[Me,e(t)]),De,n("a",We,[Pe,e(t)]),Qe,n("a",Ye,[Ve,e(t)]),Ke]),je]),n("li",null,[n("p",null,[n("a",ze,[Je,Ze,$e,nt,st,et,tt,at,ot,ct,rt,e(t)])]),lt]),n("li",null,[n("p",null,[n("a",pt,[it,dt,ut,_t,ht,mt,kt,ft,gt,e(t)])]),bt,n("p",null,[yt,n("a",vt,[Et,e(t)]),qt]),n("p",null,[Tt,St,Lt,xt,wt,Rt,Nt,Ct,It,n("a",At,[Ht,e(t)]),Ot,n("a",Ut,[Gt,e(t)]),Bt]),Ft]),n("li",null,[n("p",null,[n("a",Xt,[Mt,Dt,Wt,Pt,Qt,e(t)])]),n("p",null,[Yt,n("a",Vt,[Kt,e(t)]),jt,n("a",zt,[Jt,e(t)]),Zt]),$t]),n("li",null,[n("p",null,[n("a",na,[sa,ea,ta,aa,oa,ca,ra,e(t)])]),la,n("p",null,[pa,n("a",ia,[da,e(t)]),ua,n("a",_a,[ha,e(t)]),ma,ka,fa]),ga]),n("li",null,[n("p",null,[n("a",ba,[ya,va,Ea,e(t)])]),n("p",null,[qa,n("a",Ta,[Sa,e(t)]),La,xa,wa,Ra,Na,n("a",Ca,[Ia,e(t)]),Aa]),Ha,n("p",null,[Oa,n("a",Ua,[Ga,e(t)]),Ba,n("a",Fa,[Xa,e(t)]),Ma,n("a",Da,[Wa,e(t)]),Pa,n("a",Qa,[Ya,e(t)]),Va])]),n("li",null,[n("p",null,[n("a",Ka,[ja,za,Ja,e(t)]),Za,n("a",$a,[no,so,eo,e(t)])]),n("p",null,[to,ao,oo,n("a",co,[ro,e(t)]),lo,po,io,uo,_o,n("a",ho,[mo,e(t)]),ko]),n("p",null,[fo,go,bo,n("a",yo,[vo,e(t)]),Eo,qo,To,n("a",So,[Lo,e(t)]),xo,n("a",wo,[Ro,No,Co,e(t)]),Io,n("a",Ao,[Ho,Oo,Uo,e(t)]),Go]),Bo]),n("li",null,[n("p",null,[n("a",Fo,[Xo,Mo,Do,Wo,Po,Qo,Yo,Vo,Ko,e(t)])]),jo]),n("li",null,[n("p",null,[n("a",zo,[Jo,Zo,$o,nc,sc,e(t)])]),n("p",null,[ec,tc,ac,oc,cc,n("a",rc,[lc,e(t)]),pc]),ic]),n("li",null,[n("p",null,[n("a",dc,[uc,_c,hc,e(t)])]),n("p",null,[n("a",mc,[kc,e(t)]),fc,n("a",gc,[bc,e(t)]),yc]),vc]),n("li",null,[n("p",null,[n("a",Ec,[qc,Tc,Sc,Lc,xc,e(t)])]),wc]),n("li",null,[n("p",null,[n("a",Rc,[Nc,Cc,Ic,e(t)])]),n("p",null,[Ac,Hc,Oc,n("a",Uc,[Gc,e(t)]),Bc,Fc,Xc,n("a",Mc,[Dc,e(t)]),Wc,Pc,Qc]),Yc,n("p",null,[Vc,Kc,jc,n("a",zc,[Jc,e(t)]),Zc])]),n("li",null,[n("p",null,[n("a",$c,[nr,sr,er,e(t)])]),n("p",null,[tr,n("a",ar,[or,e(t)]),cr,n("a",rr,[lr,e(t)]),pr,n("a",ir,[dr,e(t)]),ur]),_r,n("p",null,[hr,n("a",mr,[kr,e(t)]),fr]),gr]),n("li",null,[n("p",null,[n("a",br,[yr,vr,Er,qr,Tr,e(t)]),Sr,n("a",Lr,[xr,wr,Rr,Nr,Cr,Ir,Ar,e(t)])]),Hr]),n("li",null,[n("p",null,[n("a",Or,[Ur,Gr,Br,e(t)])]),Fr,n("p",null,[n("a",Xr,[Mr,e(t)]),Dr,n("a",Wr,[Pr,e(t)]),Qr,n("a",Yr,[Vr,e(t)]),Kr,n("a",jr,[zr,e(t)]),Jr,n("a",Zr,[$r,e(t)]),nl]),sl,n("p",null,[el,n("a",tl,[al,e(t)]),ol,n("a",cl,[rl,e(t)]),ll,pl,il,dl,ul,_l,hl,n("a",ml,[kl,e(t)]),fl]),gl,bl]),n("li",null,[n("p",null,[n("a",yl,[vl,El,ql,Tl,Sl,Ll,xl,e(t)])]),wl]),n("li",null,[n("p",null,[n("a",Rl,[Nl,Cl,Il,e(t)])]),Al]),n("li",null,[n("p",null,[n("a",Hl,[Ol,Ul,Gl,Bl,Fl,Xl,Ml,e(t)])]),Dl]),n("li",null,[n("p",null,[n("a",Wl,[Pl,Ql,Yl,Vl,Kl,jl,zl,e(t)])]),n("p",null,[n("a",Jl,[Zl,$l,np,sp,ep,tp,ap,e(t)]),op,n("a",cp,[rp,lp,pp,ip,dp,up,_p,e(t)]),hp])]),n("li",null,[n("p",null,[n("a",mp,[kp,fp,gp,e(t)])]),n("p",null,[bp,yp,vp,Ep,qp,n("a",Tp,[Sp,e(t)]),Lp,n("a",xp,[wp,Rp,Np,e(t)]),Cp,Ip,Ap,Hp,Op,Up,Gp]),Bp]),n("li",null,[n("p",null,[n("a",Fp,[Xp,Mp,Dp,e(t)])]),n("p",null,[n("a",Wp,[Pp,e(t)]),Qp,n("a",Yp,[Vp,e(t)]),Kp]),jp,n("p",null,[zp,n("a",Jp,[Zp,e(t)]),$p,n("a",ni,[si,e(t)]),ei]),ti]),n("li",null,[n("p",null,[n("a",ai,[oi,ci,ri,li,pi,e(t)])]),n("p",null,[n("a",ii,[di,ui,_i,hi,mi,e(t)]),ki,n("a",fi,[gi,bi,yi,vi,Ei,e(t)]),qi])]),n("li",null,[n("p",null,[n("a",Ti,[Si,Li,xi,e(t)])]),wi,n("p",null,[Ri,n("a",Ni,[Ci,e(t)]),Ii,n("a",Ai,[Hi,e(t)]),Oi])]),n("li",null,[n("p",null,[n("a",Ui,[Gi,Bi,Fi,Xi,Mi,e(t)])]),Di]),n("li",null,[n("p",null,[n("a",Wi,[Pi,Qi,Yi,Vi,Ki,ji,zi,e(t)])]),n("p",null,[Ji,Zi,$i,nd,sd,ed,td,n("a",ad,[od,e(t)]),cd,rd,ld]),pd]),n("li",null,[n("p",null,[n("a",id,[dd,ud,_d,e(t)])]),hd]),n("li",null,[n("p",null,[n("a",md,[kd,fd,gd,bd,yd,e(t)])]),vd]),n("li",null,[n("p",null,[n("a",Ed,[qd,Td,Sd,Ld,xd,wd,Rd,e(t)])]),Nd]),n("li",null,[n("p",null,[n("a",Cd,[Id,Ad,Hd,e(t)])]),Od]),n("li",null,[n("p",null,[n("a",Ud,[Gd,Bd,Fd,e(t)])]),n("p",null,[Xd,Md,Dd,n("a",Wd,[Pd,e(t)]),Qd,n("a",Yd,[Vd,e(t)]),Kd,jd,zd]),Jd,n("p",null,[Zd,n("a",$d,[nu,e(t)]),su]),eu]),n("li",null,[n("p",null,[n("a",tu,[au,ou,cu,ru,lu,e(t)])]),n("p",null,[pu,n("a",iu,[du,uu,_u,hu,mu,e(t)]),ku])]),n("li",null,[n("p",null,[n("a",fu,[gu,bu,yu,e(t)])]),vu]),n("li",null,[n("p",null,[n("a",Eu,[qu,Tu,Su,Lu,xu,e(t)]),wu,n("a",Ru,[Nu,Cu,Iu,Au,Hu,e(t)]),Ou,n("a",Uu,[Gu,Bu,Fu,Xu,Mu,Du,Wu,e(t)]),Pu,n("a",Qu,[Yu,Vu,Ku,ju,zu,Ju,Zu,e(t)])]),n("p",null,[n("a",$u,[n_,e(t)]),s_,n("a",e_,[t_,e(t)]),a_])]),n("li",null,[n("p",null,[n("a",o_,[c_,r_,l_,p_,i_,e(t)]),d_,n("a",u_,[__,h_,m_,k_,f_,e(t)]),g_,n("a",b_,[y_,v_,E_,q_,T_,S_,L_,e(t)]),x_,n("a",w_,[R_,N_,C_,I_,A_,H_,O_,e(t)])]),U_,n("p",null,[G_,n("a",B_,[F_,e(t)]),X_,M_,D_]),W_]),n("li",null,[n("p",null,[n("a",P_,[Q_,Y_,V_,K_,j_,z_,J_,e(t)])]),n("p",null,[Z_,n("a",$_,[nh,e(t)]),sh,eh,th]),ah]),n("li",null,[n("p",null,[n("a",oh,[ch,rh,lh,e(t)])]),n("p",null,[ph,ih,dh,uh,_h,n("a",hh,[mh,e(t)]),kh]),fh,n("p",null,[gh,n("a",bh,[yh,e(t)]),vh,n("a",Eh,[qh,e(t)]),Th]),Sh]),n("li",null,[n("p",null,[n("a",Lh,[xh,wh,Rh,Nh,Ch,e(t)]),Ih,n("a",Ah,[Hh,Oh,Uh,Gh,Bh,e(t)])]),Fh]),n("li",null,[n("p",null,[n("a",Xh,[Mh,Dh,Wh,e(t)])]),n("p",null,[n("a",Ph,[Qh,e(t)]),Yh,n("a",Vh,[Kh,e(t)]),jh]),zh]),n("li",null,[n("p",null,[n("a",Jh,[Zh,$h,nm,e(t)])]),n("p",null,[sm,em,tm,n("a",am,[om,cm,rm,e(t)]),lm]),pm,n("p",null,[im,dm,um,n("a",_m,[hm,e(t)]),mm,n("a",km,[fm,e(t)]),gm,bm,ym,vm,Em,qm,Tm,Sm,Lm,xm,wm,n("a",Rm,[Nm,e(t)]),Cm,n("a",Im,[Am,e(t)]),Hm,Om,Um]),n("p",null,[Gm,Bm,Fm,n("a",Xm,[Mm,Dm,Wm,e(t)]),Pm,n("a",Qm,[Ym,e(t)]),Vm,n("a",Km,[jm,zm,Jm,e(t)]),Zm,n("a",$m,[nk,e(t)]),sk]),n("p",null,[ek,n("a",tk,[ak,e(t)]),ok,n("a",ck,[rk,e(t)]),lk,n("a",pk,[ik,e(t)]),dk,n("a",uk,[_k,e(t)]),hk])]),n("li",null,[n("p",null,[n("a",mk,[kk,fk,gk,e(t)])]),bk,n("p",null,[yk,n("a",vk,[Ek,e(t)]),qk,n("a",Tk,[Sk,e(t)]),Lk,n("a",xk,[wk,e(t)]),Rk,n("a",Nk,[Ck,e(t)]),Ik,n("a",Ak,[Hk,e(t)]),Ok]),Uk,Gk]),n("li",null,[n("p",null,[n("a",Bk,[Fk,Xk,Mk,Dk,Wk,Pk,Qk,e(t)])]),Yk,Vk,n("h2",Kk,[jk,zk,n("a",Jk,[Zk,$k,nf,e(t)]),sf,n("a",ef,[tf,af,of,e(t)]),cf,rf,lf,pf,df,uf,_f,hf,mf,kf,ff]),n("p",null,[gf,n("a",bf,[yf,vf,Ef,e(t)]),qf,n("a",Tf,[Sf,Lf,xf,e(t)]),wf,Rf,Nf,Cf,If,Af,Hf,Of,Uf,Gf,Bf]),n("p",null,[n("a",Ff,[Xf,e(t)]),Mf,n("a",Df,[Wf,e(t)]),Pf]),Qf,Yf,n("p",null,[Vf,Kf,jf,n("a",zf,[Jf,e(t)]),Zf,n("a",$f,[ng,e(t)]),sg,n("a",eg,[tg,e(t)]),ag,n("a",og,[cg,e(t)]),rg,n("a",lg,[pg,e(t)]),ig,n("a",dg,[ug,e(t)]),_g,hg,mg,n("a",kg,[fg,e(t)]),gg,bg,yg]),vg,n("p",null,[Eg,n("a",qg,[Tg,e(t)]),Sg,n("a",Lg,[xg,e(t)]),wg,n("a",Rg,[Ng,e(t)]),Cg]),Ig,n("p",null,[Ag,Hg,Og,n("a",Ug,[Gg,e(t)]),Bg,n("a",Fg,[Xg,e(t)]),Mg,n("a",Dg,[Wg,e(t)]),Pg]),Qg,n("p",null,[Yg,n("a",Vg,[Kg,e(t)]),jg,n("a",zg,[Jg,e(t)]),Zg,n("a",$g,[n1,e(t)]),s1,n("a",e1,[t1,e(t)]),a1])])]),n("h2",o1,[c1,r1,n("a",l1,[p1,e(t)])]),n("h2",i1,[d1,u1,n("a",_1,[h1,e(t)])]),n("h2",m1,[k1,f1,n("a",g1,[b1,e(t)])]),n("h2",y1,[v1,E1,n("a",q1,[T1,e(t)])]),n("h2",S1,[L1,x1,n("a",w1,[R1,e(t)])]),n("h2",N1,[C1,I1,n("a",A1,[H1,e(t)])]),n("h2",O1,[U1,G1,n("a",B1,[F1,e(t)])]),n("h2",X1,[M1,D1,n("a",W1,[P1,e(t)])]),n("h2",Q1,[Y1,V1,n("a",K1,[j1,e(t)])]),n("h2",z1,[J1,Z1,n("a",$1,[nb,e(t)])]),n("h2",sb,[eb,tb,n("a",ab,[ob,e(t)])]),n("h2",cb,[rb,lb,n("a",pb,[ib,e(t)])]),n("h2",db,[ub,_b,n("a",hb,[mb,e(t)])]),n("h2",kb,[fb,gb,n("a",bb,[yb,e(t)])]),n("h2",vb,[Eb,qb,n("a",Tb,[Sb,e(t)])]),n("h2",Lb,[xb,wb,n("a",Rb,[Nb,e(t)])]),n("h2",Cb,[Ib,Ab,n("a",Hb,[Ob,e(t)])])],64)}var Mb=d(u,[["render",Ub]]);export{Mb as default};
